<application>
  <component name="AppStorage">
    <histories>
      <item value="Obtain the screen density to calculate the viewfinder's rectangle." />
      <item value="Calculate the viewfinder's rectangle, which in the middle of the layout. //Set the scanning area. (Optional. Rect can be null. If no settings are specified, it will be located in the middle of the layout.)" />
      <item value="Obtain the screen size." />
      <item value="CHARACTER SET" />
      <item value="quit Synchronously" />
      <item value="We're decoding as fast as possible, so when one decode fails, start another." />
      <item value="Got product query message" />
      <item value="Hybrid Binarizer" />
      <item value="Hybrid" />
      <item value="This class is the core bitmap class used by ZXing to represent 1 bit data. Reader objects * accept a BinaryBitmap and attempt to decode it." />
      <item value="Allowed lengths of encoded data -- reject anything else. Maps to an {@code int[]}." />
      <item value="The caller needs to be notified via callback when a possible {@link ResultPoint} * is found. Maps to a {@link ResultPointCallback}." />
      <item value="Encapsulates a type of hint that a caller may pass to a barcode reader to help it * more quickly or accurately decode it. It is up to implementations to decide what, * if anything, to do with the information that is supplied." />
      <item value="Unspecified, application-specific hint. Maps to an unspecified {@link Object}." />
      <item value="corner" />
      <item value="Draw the exterior (i.e. outside the framing rect) darkened" />
      <item value="Sets the source information of the image being processed by detectors, including size and * whether it is flipped, which informs how to transform image coordinates later" />
      <item value="Graphic" />
      <item value="the denominator of the rational" />
      <item value="the numerator of the rational" />
      <item value="The signs of the numerator and the denominator may be flipped such that the denominator * is always positive. Both the numerator and denominator will be converted to their reduced * forms (see {@link #equals} for more details).&lt;/p&gt;" />
      <item value="Create a {@code Rational} with a given numerator and denominator.&lt;/p&gt;" />
      <item value="Sets the layout direction of the {@link ViewPort}." />
      <item value="The viewPort which represents the visible camera sensor rect." />
      <item value="val aspectRatio = Rational(viewFinder.width, viewFinder.height) * val viewport = ViewPort.Builder(aspectRatio, preview.getTargetRotation()).build()" />
      <item value="aspect ratio of the output crop rect if the scale type * is FILL_START, FILL_CENTER or FILL_END. This is usually the * width/height of the preview viewfinder that displays the camera * feed. The value is ignored if the scale type is FIT." />
      <item value="The aspect ratio is the ratio of width to height in the sensor orientation." />
      <item value="It is not allowed to set both target aspect ratio and target resolution on the same * use case. Attempting so will throw an IllegalArgumentException when building the Config." />
      <item value="The target aspect ratio is used as a hint when determining the resulting output aspect * ratio which may differ from the request, possibly due to device constraints. * Application code should check the resulting output's resolution and the resulting * aspect ratio may not be exactly as requested." />
      <item value="If not set, resolutions with aspect ratio 4:3 will be considered in higher * priority." />
      <item value="Sets the aspect ratio of the intended target for images from this configuration." />
      <item value="If not set, the target rotation will default to the value of * {@link android.view.Display#getRotation()} of the default display at the time the * use case is created. The use case is fully created once it has been attached to a camera." />
      <item value="This adjust the {@link ImageInfo#getRotationDegrees()} of the {@link ImageProxy} * passed to {@link Analyzer#analyze(ImageProxy)}. The rotation value of ImageInfo will * be the rotation, which if applied to the output image, will make the image match * target rotation specified here." />
      <item value="Sets the rotation of the intended target for images from this configuration." />
      <item value="The target resolution attempts to establish a minimum bound for the image resolution. * The actual image resolution will be the closest available resolution in size that is not * smaller than the target resolution, as determined by the Camera implementation. However, * if no resolution exists that is equal to or larger than the target resolution, the * nearest available resolution smaller than the target resolution will be chosen. * Resolutions with the same aspect ratio of the provided {@link Size} will be considered in * higher priority before resolutions of different aspect ratios." />
      <item value="Sets the resolution of the intended target from this configuration." />
      <item value="A unique string identifier for the instance of the class being * configured." />
      <item value="The rotation of the intended target." />
      <item value="Sets the default executor that will be used for background tasks." />
      <item value="The maximum available resolution that could be selected for an {@link ImageAnalysis} * is limited to be under 1080p. The limitation of 1080p for {@link ImageAnalysis} has * considered both performance and quality factors so that users can obtain reasonable * quality and smooth output stream under 1080p." />
      <item value="The resolution {@link Size} should be expressed in the coordinate frame after * rotating the supported sizes by the target rotation. For example, a device with * portrait natural orientation in natural target rotation requesting a portrait image * may specify 480x640, and the same device, rotated 90 degrees and targeting landscape * orientation may specify 640x480." />
      <item value="possible" />
      <item value="Point" />
      <item value="Possible" />
      <item value="Demonstrates use of RenderScript to display a live HDR feed from camera frames using Camera2 API." />
      <item value="Adds another {@link MeteringPoint} with default metering mode {@link #FLAG_AF} | * {@link #FLAG_AE} | {@link #FLAG_AWB}." />
      <item value="When the torch is enabled, the torch will remain enabled during photo capture regardless * of the flashMode setting. When the torch is disabled, flash will function as the flash mode * set by either {@link ImageCapture#setFlashMode(int)} or * {@link ImageCapture.Builder#setFlashMode(int)}." />
      <item value="Unbinds all specified use cases from the lifecycle." />
      <item value="It modifies both current zoomRatio and linearZoom so if apps are observing * zoomRatio or linearZoom, they will get the update as well. If the ratio is * smaller than {@link ZoomState#getMinZoomRatio()} or larger than * {@link ZoomState#getMaxZoomRatio()}, the returned {@link ListenableFuture} will fail with * {@link IllegalArgumentException} and it won't modify current zoom ratio. It is the * applications' duty to clamp the ratio." />
      <item value="Sets current zoom by ratio." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1646" />
        <entry key="ENGLISH" value="1647" />
        <entry key="FRENCH" value="1" />
        <entry key="KOREAN" value="92" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="JAPANESE" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>