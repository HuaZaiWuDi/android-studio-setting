<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="Payload info. if return null, the entire item will be refreshed." />
      <item value="When areItemsTheSame(T, T) returns true for two items and areContentsTheSame(T, T) returns false for them, this method is called to get a payload about the change. For example, if you are using DiffUtil with RecyclerView, you can return the particular field that changed in the item and your ItemAnimator can use that information to run the correct animation." />
      <item value="Called by the DiffUtil when it wants to check whether two items have the same data. DiffUtil uses this information to detect if the contents of an item has changed. DiffUtil uses this method to check equality instead of Object.equals(Object) so that you can change its behavior depending on your UI. For example, if you are using DiffUtil with a RecyclerView.Adapter, you should return whether the items' visual representations are the same." />
      <item value="True if the contents of the items are the same or false if they are different." />
      <item value="oldItem – The item in the old list. newItem – The item in the new list." />
      <item value="Called to check whether two items have the same data. This information is used to detect if the contents of an item have changed. This method to check equality instead of Object.equals(Object) so that you can change its behavior depending on your UI. For example, if you are using DiffUtil with a RecyclerView.Adapter, you should return whether the items' visual representations are the same. This method is called only if areItemsTheSame(T, T) returns true for these items. Note: Two null items are assumed to represent the same contents. This callback will not be invoked for this case." />
      <item value="Temporarily detach and scrap all currently attached child views. Views will be scrapped into the given Recycler. The Recycler may prefer to reuse scrap views before other views that were previously recycled. Params: recycler – Recycler to scrap views into" />
      <item value="detach And Scrap Attached Views(recycler);" />
      <item value="Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch any more events. For instance, for an android.app.Activity, this state is reached right before Activity's onDestroy call." />
      <item value="Modifies the source Publisher so that it invokes the given action when it is subscribed from its subscribers. Each subscription will result in an invocation of the given action except when the source Publisher is reference counted, in which case the source Publisher will invoke the given action for the first subscription." />
      <item value="Modifies the source Publisher so that it invokes the given action when it receives a request for more items. Note: This operator is for tracing the internal behavior of back-pressure request patterns and generally intended for debugging use." />
      <item value="No Op" />
      <item value="Attempts to get the ViewHolder for the given position, either from the Recycler scrap, cache, the RecycledViewPool, or creating it directly." />
      <item value="position – Position of ViewHolder to be returned. dryRun – True if the ViewHolder should not be removed from scrapcache deadlineNs – Time, relative to getNanoTime(), by which bindcreate work should complete. If FOREVER_NS is passed, this method will not fail to createbind the holder if needed." />
      <item value="deadline Ns" />
      <item value="Not enough memory to allocate buffers for rehashing: 2097152 -&gt; 4194304" />
      <item value="Note: Two {@code null} items are assumed to represent the same contents. This callback will not be invoked for this case." />
      <item value="Called to check whether two items have the same data." />
      <item value="This information is used to detect if the contents of an item have changed." />
      <item value="This method to check equality instead of {@link Objectequals(Object)} so that you can change its behavior depending on your UI." />
      <item value="For example, if you are using DiffUtil with a {@link RecyclerView.Adapter RecyclerView.Adapter}, you should return whether the items' visual representations are the same." />
      <item value="This method is called only if {@link areItemsTheSame(T, T)} returns {@code true} for these items." />
      <item value="For example, if you are using DiffUtil with {@link RecyclerView}, you can return the particular field that changed in the item and your {@link RecyclerView.ItemAnimator ItemAnimator} can use that information to run the correct animation." />
      <item value="When {@link areItemsTheSame(T, T)} returns {@code true} for two items and {@link areContentsTheSame(T, T)} returns false for them, this method is called to get a payload about the change." />
      <item value="This class holds the information about the result of a calculateDiff(DiffUtil.Callback, boolean) call." />
      <item value="This class holds the information about the result of a calculateDiff(DiffUtil.Callback, boolean) call. You can consume the updates in a DiffResult via dispatchUpdatesTo(ListUpdateCallback) or directly stream the results into a RecyclerView.Adapter via dispatchUpdatesTo(RecyclerView.Adapter)." />
      <item value="commit Callback" />
      <item value="warning: redirecting to" />
      <item value="sign In With Code Result" />
      <item value="全屋" />
      <item value="Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function. The sort is stable. It means that equal elements preserve their order relative to each other after sorting. Samples: samples.collections.Collections.Sorting.sortedBy Unresolved" />
      <item value="Inserts an element into the list at the specified index." />
      <item value="Environment.get External Storage Directory().can Write()" />
      <item value="Storage state if the media is present and mounted at its mount point with readwrite access. See Also: getExternalStorageState(File)" />
      <item value="File Not Found Exception" />
      <item value="Blocking inter process call that enables the DisplayLeakActivity. When you first install the app, DisplayLeakActivity is disabled by default and will only be enabled once a potential leak has been found and the analysis starts. You can call this method to enable DisplayLeakActivity before any potential leak has been detected." />
      <item value="Creates a RefWatcher that works out of the box, and starts watching activity references (on ICS+)" />
      <item value="Whether to stop monitoring when in debug mode. Returns: true if stop, false otherwise" />
      <item value="Block interceptor, developer may provide their own actions." />
      <item value="Whether to delete files whose stack is in white list, used with white-list. Returns: true if delete, false it not." />
      <item value="Filter stack without any in concern package, used with @{code concernPackages}. Returns: true if filter, false it not." />
      <item value="Packages that developer concern, by default it uses process name, put high priority one in pre-order. Returns: null if simply concern only package with process name." />
      <item value="Implement in your project, bundled log files. Params: zippedFile – zipped file" />
      <item value="Implement in your project, bundle files into a zip file. Params: src – files before compress dest – files compressed Returns: true if compression is successful" />
      <item value="Thread stack dump interval, use when block happens, BlockCanary will dump on main thread stack according to current sample cycle. Because the implementation mechanism of Looper, real dump interval would be longer than the period specified here (especially when cpu is busier). Returns: dump interval (in millis)" />
      <item value="Config monitor duration, after this time BlockCanary will stop, use with BlockCanary's isMonitorDurationEnd Returns: monitor last duration (in hour)" />
      <item value="Config block threshold (in millis), dispatch over this duration is regarded as a BLOCK. You may set it from performance of device. Returns: threshold in mills" />
      <item value="Network type Returns: String like 2G, 3G, 4G, wifi, etc." />
      <item value="Implement in your project. Returns: user id" />
      <item value="Implement in your project. Returns: Qualifier which can specify this installation, like version + flavor." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2443" />
        <entry key="ENGLISH" value="2444" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="BASQUE" value="1" />
        <entry key="RUSSIAN" value="4" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="11" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1657018924070" />
  </component>
</application>