<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="Flash Mode" />
      <item value="A set of requirements and priorities used to select a camera or return a filtered set of cameras." />
      <item value="RejectedExecutionException at discretion of {@code RejectedExecutionHandler}, if the task cannot be accepted for execution" />
      <item value="Creates an Executor that uses a single worker thread operating off an unbounded queue. (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.) Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent newFixedThreadPool(1) the returned executor is guaranteed not to be reconfigurable to use additional threads." />
      <item value="When set on a View, this listener method will be called instead of the view's own onApplyWindowInsets method." />
      <item value="Called when a new child is added to this ViewGroup. Overrides should always call super.onViewAdded." />
      <item value="Transforms a passed value to a LSB first byte array with the size of the specified capacity Params: capacity – size of the resulting byte array value – that should be represented as a byte array" />
      <item value="español" />
      <item value="captcha" />
      <item value="Register a listener that will be notified whenever a child view is attached to or detached from RecyclerView. This listener will be called when a LayoutManager or the RecyclerView decides that a child view is no longer needed. If an application associates expensive or heavyweight data with item views, this may be a good place to release or free those resources. Params: listener – Listener to register" />
      <item value="Pattern Run" />
      <item value="&lt;p&gt;The resulting {@link android.view.ViewStructure} is then passed to the autofill service, which parses it looking for views that can be autofilled. If the service finds such views, it returns a data structure to the Android System containing the following optional info: &lt;ul&gt; &lt;li&gt;Datasets used to autofill subsets of views in the activity. &lt;li&gt;Id of views that the service can save their values for future autofilling. &lt;ul&gt; &lt;p&gt;When the service returns datasets, the Android System displays an autofill dataset picker UI associated with the view, when the view is focused on and is part of a dataset. The application can be notified when the UI is shown by registering an {@link AutofillCallback} through {@link registerCallback(AutofillCallback)}. When the user selects a dataset from the UI, all views present in the dataset are autofilled, through calls to {@link Viewautofill(AutofillValue)} or {@link Viewautofill(SparseArray)}. &lt;p&gt;When the service returns ids of savable views, the Android System keeps track of changes made to these views, so they can be used to determine if the autofill save UI is shown later. &lt;p&gt;The context is then finished when one of the following occurs: &lt;ul&gt; &lt;li&gt;{@link commit()} is called or all savable views are gone. &lt;li&gt;{@link cancel()} is called. &lt;ul&gt; &lt;p&gt;Finally, after the autofill context is commited (i.e., not cancelled), the Android System shows an autofill save UI if the value of savable views have changed. If the user selects the option to Save, the current value of the views is then sent to the autofill service. &lt;h3 id=&quot;additional-notes&quot;&gt;Additional notes&lt;h3&gt; &lt;p&gt;It is safe to call &lt;code&gt;AutofillManager&lt;code&gt; methods from any thread." />
      <item value="&lt;p&gt;Typically, the context is automatically created when the first view of the activity is focused because {@code View.onFocusChanged()} indirectly calls {@link notifyViewEntered(View)}. App developers can call {@link requestAutofill(View)} to explicitly create it (for example, a custom view developer could offer a contextual menu action in a text-field view to let users manually request autofill). &lt;p&gt;After the context is created, the Android System creates a {@link android.view.ViewStructure} that represents the view hierarchy by calling {@link ViewdispatchProvideAutofillStructure(android.view.ViewStructure, int)} in the root views of all application windows. By default, {@code dispatchProvideAutofillStructure()} results in subsequent calls to {@link ViewonProvideAutofillStructure(android.view.ViewStructure, int)} and {@link ViewonProvideAutofillVirtualStructure(android.view.ViewStructure, int)} for each view in the hierarchy. &lt;p&gt;The resulting {@link android.view.ViewStructure} is then passed to the autofill service, which parses it looking for views that can be autofilled. If the service finds such views, it returns a data structure to the Android System containing the following optional info:" />
      <item value="&lt;p&gt;The {@link AutofillManager} class provides ways for apps and custom views to integrate with the Autofill Framework lifecycle. &lt;p&gt;To learn about using Autofill in your app, read the &lt;a href=&quot;guidetopicstextautofill&quot;&gt;Autofill Framework&lt;a&gt; guides. &lt;h3 id=&quot;autofill-lifecycle&quot;&gt;Autofill lifecycle&lt;h3&gt; &lt;p&gt;The autofill lifecycle starts with the creation of an autofill context associated with an activity context. The autofill context is created when one of the following methods is called for the first time in an activity context, and the current user has an enabled autofill service: &lt;ul&gt; &lt;li&gt;{@link notifyViewEntered(View)} &lt;li&gt;{@link notifyViewEntered(View, int, Rect)} &lt;li&gt;{@link requestAutofill(View)} &lt;ul&gt; &lt;p&gt;Typically, the context is automatically created when the first view of the activity is focused because {@code View.onFocusChanged()} indirectly calls {@link notifyViewEntered(View)}. App developers can call {@link requestAutofill(View)} to explicitly create it (for example, a custom view developer could offer a contextual menu action in a text-field view to let users manually request autofill). &lt;p&gt;After the context is created, the Android System creates a {@link android.view.ViewStructure} that represents the view hierarchy by calling {@link ViewdispatchProvideAutofillStructure(android.view.ViewStructure, int)} in the root views of all application windows. By default, {@code dispatchProvideAutofillStructure()} results in subsequent calls to {@link ViewonProvideAutofillStructure(android.view.ViewStructure, int)} and {@link ViewonProvideAutofillVirtualStructure(android.view.ViewStructure, int)} for each view in the hierarchy. &lt;p&gt;The resulting {@link android.view.ViewStructure} is then passed to the autofill service, which parses it looking for views that can be autofilled. If the service finds such views, it returns a data structure to the Android System containing the following optional info: &lt;ul&gt; &lt;li&gt;Datasets used to autofill subsets of views in the activity. &lt;li&gt;Id of views that the service can save their values for future autofilling. &lt;ul&gt; &lt;p&gt;When the service returns datasets, the Android System displays an autofill dataset picker UI associated with the view, when the view is focused on and is part of a dataset. The application can be notified when the UI is shown by registering an {@link AutofillCallback} through {@link registerCallback(AutofillCallback)}. When the user selects a dataset from the UI, all views present in the dataset are autofilled, through calls to {@link Viewautofill(AutofillValue)} or {@link Viewautofill(SparseArray)}. &lt;p&gt;When the service returns ids of savable views, the Android System keeps track of changes made to these views, so they can be used to determine if the autofill save UI is shown later. &lt;p&gt;The context is then finished when one of the following occurs: &lt;ul&gt; &lt;li&gt;{@link commit()} is called or all savable views are gone. &lt;li&gt;{@link cancel()} is called. &lt;ul&gt; &lt;p&gt;Finally, after the autofill context is commited (i.e., not cancelled), the Android System shows an autofill save UI if the value of savable views have changed. If the user selects the option to Save, the current value of the views is then sent to the autofill service. &lt;h3 id=&quot;additional-notes&quot;&gt;Additional notes&lt;h3&gt; &lt;p&gt;It is safe to call &lt;code&gt;AutofillManager&lt;code&gt; methods from any thread." />
      <item value="Returns true if the calling application provides a AutofillService that is enabled for the current user, or false otherwise." />
      <item value="Called to indicate the current autofill context should be cancelled. This method is typically called by Views that manage virtual views; for example, when the view is rendering an HTML page with a form and virtual views that represent the HTML elements, it should call this method if the user does not post the form but moves to another form in this page. Note: This method does not need to be called on regular application lifecycle methods such as android.app.Activity.finish()." />
      <item value="If not explicitly specified, this view and its children don't support autofill. &lt;p&gt; This is done because autofill's means of uniquely identifying views doesn't work out of the box with View recycling." />
      <item value="Accessing hidden field LandroidappActivity;-&gt;mAutoFillResetNeeded:Z (greylist-max-o, reflection, denied)" />
      <item value="Sets the mode for determining whether this view is considered important for autofill. The platform determines the importance for autofill automatically but you can use this method to customize the behavior. For example: When the view contents is irrelevant for autofill (for example, a text field used in a &quot;Captcha&quot; challenge), it should be View.IMPORTANT_FOR_AUTOFILL_NO. When both the view and its children are irrelevant for autofill (for example, the root view of an activity containing a spreadhseet editor), it should be View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS. When the view content is relevant for autofill but its children aren't (for example, a credit card expiration date represented by a custom view that overrides the proper autofill methods and has 2 children representing the month and year), it should be View.IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS. NOTE: setting the mode as does View.IMPORTANT_FOR_AUTOFILL_NO or View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS does not guarantee the view (and its children) will be always be considered not important; for example, when the user explicitly makes an autofill request, all views are considered important. See isImportantForAutofill(View) for more details about how the View's importance for autofill is used." />
      <item value="Returns true if autofill is supported by the current device and is supported for this user. Autofill is typically supported, but it could be unsupported in cases like: Low-end devices. Device policy rules that forbid its usage." />
      <item value="Called by android.app.Activity to commit or cancel the session on finish." />
      <item value="Explicitly requests a new autofill context. Normally, the autofill context is automatically started if necessary when notifyViewEntered(View) is called, but this method should be used in the cases where it must be explicitly started. For example, when the view offers an AUTOFILL option on its contextual overflow menu, and the user selects it. Params: view – view requesting the new autofill context." />
      <item value="whether the view is considered important for autofill." />
      <item value="Sets the hints that help an android.service.autofill.AutofillService determine how to autofill the view with the user's data." />
      <item value="Hint the Android System that this view is not important for autofill, but its children (if any) will be traversed.." />
      <item value="Hint the Android System that this view is important for autofill, and its children (if any) will be traversed.." />
      <item value="Let the Android System use its heuristics to determine if the view is important for autofill." />
      <item value="Hints the Android System whether the view node associated with this View should be included in a view structure used for autofill purposes." />
      <item value="Declare AutofillService implementation; only needed for a small number of apps that will be implementing an AutofillService. Framework parses meta-data and sets the service's Settings Activity based on what the meta-data resource points to." />
      <item value="Called to indicate the current autofill context should be commited. This method is typically called by Views that manage virtual views; for example, when the view is rendering an HTML page with a form and virtual views that represent the HTML elements, it should call this method after the form is submitted and another page is rendered. Note: This method does not need to be called on regular application lifecycle methods such as android.app.Activity.finish()." />
      <item value="Hint the Android System that this view is important for autofill, but its children (if any) will not be traversed." />
      <item value="Hint the Android System that this view is not important for autofill, and its children (if any) will not be traversed." />
      <item value="DROP" />
      <item value="RecyclerView listens for Adapter's notify events and calculates the effects of adapter data changes on existing Views. These calculations are used to decide which animations should be run. To support predictive animations, RecyclerView may rewrite or reorder Adapter changes to present the correct state to LayoutManager in pre-layout pass. For example, a newly added item is not included in pre-layout item count because pre-layout reflects the contents of the adapter before the item is added. Behind the scenes, RecyclerView offsets RecyclerView.Recycler.getViewForPosition(int) calls such that LayoutManager does not know about the new item's existence in pre-layout. The item will be available in second layout pass and will be included in the item count. Similar adjustments are made for moved and removed items as well." />
      <item value="Returns the total number of items that can be laid out. Note that this number is not necessarily equal to the number of items in the adapter, so you should always use this number for your position calculations and never access the adapter directly." />
      <item value="get Column Count For Accessibility" />
      <item value="Row count is one more than the last item's row index." />
      <item value="Returns true if Glide should check the AndroidManifest for GlideModules. Implementations should return false after they and their dependencies have migrated to Glide's annotation processor. Returns true by default." />
      <item value="Defines a set of dependencies and options to use when initializing Glide within an application. There can be at most one AppGlideModule in an application. Only Applications can include a AppGlideModule. Libraries must use LibraryGlideModule. Classes that extend AppGlideModule must be annotated with com.bumptech.glide.annotation.GlideModule to be processed correctly. Classes that extend AppGlideModule can optionally be annotated with com.bumptech.glide.annotation.Excludes to optionally exclude one or more LibraryGlideModule andor GlideModule classes. Once an application has migrated itself and all libraries it depends on to use Glide's annotation processor, AppGlideModule implementations should override isManifestParsingEnabled() and return false." />
      <item value="incrementing generation means any currently-running diffs are discarded when they finish" />
      <item value="Expected performance impact from inlining is insignificant. Inlining works best for functions with parameters of functional types" />
      <item value="Expected performance impact from inlining is insignificant. Inlining works best for functions with parameters of functional type" />
      <item value="marquee" />
      <item value="Hide the dialog, but do not dismiss it." />
      <item value="Returns drawables for the start, top, end, and bottom borders." />
      <item value="icon gravity view" />
      <item value="m Icon GRAVITY" />
      <item value="Add a listener for attach state changes. This listener will be called whenever this view is attached or detached from a window. Remove the listener using removeOnAttachStateChangeListener(View.OnAttachStateChangeListener)." />
      <item value="Check whether a particular package has been granted a particular permission. Params: permName – The name of the permission you are checking for. packageName – The name of the package you are checking against. Returns: If the package has the permission, PERMISSION_GRANTED is returned. If it does not have the permission, PERMISSION_DENIED is returned." />
      <item value="true to indicate adapter startup has begun, or false on immediate error" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="3209" />
        <entry key="ENGLISH" value="3221" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="BASQUE" value="1" />
        <entry key="GERMAN" value="5" />
        <entry key="RUSSIAN" value="6" />
        <entry key="FRENCH" value="6" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="13" />
        <entry key="DUTCH" value="1" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="2" />
        <entry key="LATIN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ESPERANTO" value="27" />
        <entry key="SPANISH" value="9" />
        <entry key="ITALIAN" value="6" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1671071274421" />
  </component>
  <component name="Settings">
    <option name="showExplanation" value="true" />
    <option name="showWordsOnStartup" value="true" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1678070288530" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="CHINESE" />
    <option name="translator" value="MICROSOFT" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogX" value="837" />
    <option name="newTranslationDialogY" value="485" />
    <histories>
      <item value="f the view later scrolls to move anchor to a different location, the popup will be moved correspondingly." />
      <item value="Flip the location to align the right sides of the popup and anchor instead of left." />
      <item value="max Available Height" />
      <item value="Called when the parent CoordinatorLayout is about to measure the given child view. This method can be used to perform custom or modified measurement of a child view in place of the default child measurement behavior. The Behavior's implementation can delegate to the standard CoordinatorLayout measurement behavior by calling parent.onMeasureChild." />
      <item value="Determine the current opacity of the scrim behind a given child view" />
      <item value="Supply a scrim color that will be painted behind the associated child view." />
      <item value="Check if a given point in the CoordinatorLayout's coordinates are within the view bounds of the given direct child view." />
      <item value="eturn the kind of action being performed. Consider using getActionMasked and getActionIndex to retrieve the separate masked action and pointer index." />
      <item value="Return the masked action being performed, without pointer index information. Use getActionIndex to return the index associated with pointer actions. Returns: The action, such as ACTION_DOWN or ACTION_POINTER_DOWN." />
      <item value="Respond to CoordinatorLayout touch events before they are dispatched to child views. Behaviors can use this to monitor inbound touch events until one decides to intercept the rest of the event stream to take an action on its associated child view. This method will return false until it detects the proper intercept conditions, then return true once those conditions have occurred. Once a Behavior intercepts touch events, the rest of the event stream will be sent to the onTouchEvent method. This method will be called regardless of the visibility of the associated child of the behavior. If you only wish to handle touch events when the child is visible, you should add a check to View.isShown() on the given child." />
      <item value="the proposed dependency of child" />
      <item value="Determine whether the supplied child view has another specific sibling view as a layout dependency. This method will be called at least once in response to a layout request. If it returns true for a given child and dependency view pair, the parent CoordinatorLayout will: Always lay out this child after the dependent child is laid out, regardless of child order. Call onDependentViewChanged when the dependency view's layout or position changes. Params: parent – the parent view of the given child child – the child view to test dependency – the proposed dependency of child Returns: true if child's layout depends on the proposed dependency's layout, false otherwis" />
      <item value="dependency" />
      <item value="get APK Expansion Files" />
      <item value="Fence" />
      <item value="The traditional location for pictures and videos when mounting the device as a camera. Note that this is primarily a convention for the top-level public directory, as this convention makes no sense elsewhere." />
      <item value="Standard directory in which to place pictures that are available to the user. Note that this is primarily a convention for the top-level public directory, as the media scanner will find and collect pictures in any directory" />
      <item value="Standard directory in which to place any audio files that should be in the list of podcasts that the user can select (not as regular music). This may be combined with DIRECTORY_MUSIC, DIRECTORY_AUDIOBOOKS, DIRECTORY_NOTIFICATIONS, DIRECTORY_ALARMS, DIRECTORY_RINGTONES, and DIRECTORY_RECORDINGS as a series of directories to categorize a particular audio file as more than one type." />
      <item value="Starting in Build.VERSION_CODES.KITKAT, if your application only needs to store internal data, consider using Context.getExternalFilesDir(String), Context.getExternalCacheDir(), or Context.getExternalMediaDirs(), which require no permissions to read or write." />
      <item value="Return the primary sharedexternal storage directory. This directory may not currently be accessible if it has been mounted by the user on their computer, has been removed from the device, or some other problem has happened. You can determine its current state with getExternalStorageState(). Note: don't be confused by the word &quot;external&quot; here. This directory can better be thought as mediashared storage. It is a filesystem that can hold a relatively large amount of data and that is shared across all applications (does not enforce permissions). Traditionally this is an SD card, but it may also be implemented as built-in storage in a device that is distinct from the protected internal storage and can be mounted as a filesystem on a computer. On devices with multiple users (as described by UserManager), each user has their own isolated shared storage. Applications only have access to the shared storage for the user they're running as. In devices with multiple sharedexternal storage directories, this directory represents the primary storage that the user will interact with. Access to secondary storage is available through Context.getExternalFilesDirs(String), Context.getExternalCacheDirs(), and Context.getExternalMediaDirs(). Applications should not directly use this top-level directory, in order to avoid polluting the user's root namespace. Any files that are private to the application should be placed in a directory returned by Context.getExternalFilesDir, which the system will take care of deleting if the application is uninstalled. Other shared files should be placed in one of the directories returned by getExternalStoragePublicDirectory. Writing to this path requires the Manifest.permission.WRITE_EXTERNAL_STORAGE permission, and starting in Build.VERSION_CODES.KITKAT, read access requires the Manifest.permission.READ_EXTERNAL_STORAGE permission, which is automatically granted if you hold the write permission. Starting in Build.VERSION_CODES.KITKAT, if your application only needs to store internal data, consider using Context.getExternalFilesDir(String), Context.getExternalCacheDir(), or Context.getExternalMediaDirs(), which require no permissions to read or write. This path may change between platform versions, so applications should only persist relative paths. Here is an example of typical code to monitor the state of external storage: @sample developmentsamplesApiDemossrccomexampleandroidapiscontentExternalStorage.java monitor_storage Note that alternatives such as Context.getExternalFilesDir(String) or MediaStore offer better performance." />
      <item value="regex" />
      <item value="Pattern" />
      <item value="wrap an activity the content view is: android.R.id.content" />
      <item value="peek wrapper for the specific activity, return the origin SmartSwipeWrapper if exists, else return null" />
      <item value="Only classes are allowed on the left hand side of a class literal" />
      <item value="env: python: No such file or directory" />
      <item value="Invalid user. The password service must be run by root" />
      <item value="AUTH CODE STATE" />
      <item value="tencentSms" />
      <item value="Tells the WebView to enable JavaScript execution. The default is false." />
      <item value="Kernel" />
      <item value="domain" />
      <item value="domian" />
      <item value="anonymous" />
      <item value="anonym" />
      <item value="a'non" />
      <item value="anony" />
      <item value="an" />
      <item value="auto Logout" />
      <item value="Using setJavaScriptEnabled can introduce XSS vulnerabilities into your application, review carefully" />
      <item value="Android Debug Database" />
      <item value="get Canonical Path" />
      <item value="Intent action for triggering FireOS connectivity checking." />
      <item value="Broadcast the given intent to all interested BroadcastReceivers. This call is asynchronous; it returns immediately, and you will continue executing while the receivers are run. Params: intent – The Intent to broadcast; all receivers matching this Intent will receive the broadcast. Returns: Returns true if the intent has been scheduled for delivery to one or more broadcast receivers. (Note tha delivery may not ultimately take place if one of those receivers is unregistered before it is dispatched.)" />
      <item value="register reload app broadcast receiver" />
      <item value="Registers a BroadcastReceiver to listen to reboot broadcasts and trigger reboot. Should be called during boot after the ActivityManagerService is up and registered as a system service so it can handle registration of a BroadcastReceiver." />
      <item value="enabled" />
      <item value="The attribute android:allowBackup is deprecated from Android 12 and higher and may be removed in future versions. Consider adding the attribute android:dataExtractionRules specifying an @xml resource which configures cloud backups and device transfers on Android 12 and higher." />
      <item value="curve" />
      <item value="Displays an image subsampled as necessary to avoid loading too much image data into memory. After zooming in, a set of image tiles subsampled at higher resolution are loaded and displayed over the base layer. During pan and zoom, tiles off screen or higherlower resolution than required are discarded from memory. Tiles are no larger than the max supported bitmap size, so with large images tiling may be used even when zoomed out. v prefixes - coordinates, translations and distances measured in screen (view) pixels s prefixes - coordinates, translations and distances measured in rotated and cropped source image pixels (scaled) f prefixes - coordinates, translations and distances measured in original unrotated, uncropped source file pixels" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="118" />
        <entry key="ENGLISH" value="119" />
        <entry key="GERMAN" value="1" />
      </map>
    </option>
  </component>
</application>