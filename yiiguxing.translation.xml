<application>
  <component name="AppStorage">
    <histories>
      <item value="扫描器" />
      <item value="Doubly-linked list implementation of the {@code List} and {@code Deque} * interfaces. Implements all optional list operations, and permits all * elements (including {@code null})." />
      <item value="Some privileges permanently disabled, may need to set up in the execute." />
      <item value="The detected signal level in dBm, also known as the RSSI." />
      <item value="Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function." />
      <item value="Register a BroadcastReceiver to listen to * {@code SCAN_RESULTS_AVAILABLE_ACTION}.&lt;/li&gt; * &lt;li&gt;When a broadcast is received, call: * {@code ((WifiManager) getSystemService(WIFI_SERVICE)).getScanResults()}&lt;/li&gt;" />
      <item value="Request a scan for access points. Returns immediately. The availability * of the results is made known later by means of an asynchronous event sent * on completion of the scan." />
      <item value="The ability for apps to trigger scan requests will be removed in a future * release." />
      <item value="if the operation succeeded, i.e., the scan was initiated." />
      <item value="Pop the last fragment transition from the manager's fragment * back stack." />
      <item value="等待" />
      <item value="ACCESS CONFIG Guide Page" />
      <item value="ACCESS" />
      <item value="Centers the axis labels instead of drawing them at their original position. * This is useful especially for grouped BarChart." />
      <item value="axis label entries only used for centered labels" />
      <item value="the actual array of entries" />
      <item value="Re-subscribes to the current Single if and when the Publisher returned by the handler * function signals a value." />
      <item value="take While" />
      <item value="Atomically increments by one the current value." />
      <item value="The following example demonstrates how to retry an asynchronous source with a delay:" />
      <item value="灯" />
      <item value="bright" />
      <item value="Traffic" />
      <item value="apps should use the more versatile {@link #requestNetwork}, * {@link #registerNetworkCallback} or {@link #registerDefaultNetworkCallback} * functions instead for faster and more detailed updates about the network * changes they care about." />
      <item value="入网" />
      <item value="Access" />
      <item value="Active" />
      <item value="Could not resolve" />
      <item value="Unable to resolve dependency for" />
      <item value="时区" />
      <item value="Annotation is stored in binary output and visible for reflection (default retention)" />
      <item value="Annotation is stored in binary output, but invisible for reflection" />
      <item value="Annotation isn't stored in binary output" />
      <item value="Property" />
      <item value="Field, including property's backing field" />
      <item value="annotation" />
      <item value="True if the child does not want the parent to * intercept touch events." />
      <item value="This parent should pass this call onto its parents. This parent must obey * this request for the duration of the touch (that is, only clear the flag * after this parent has received an up or a cancel." />
      <item value="Disallow" />
      <item value="Called when a child does not want this parent and its ancestors to * intercept touch events with * {@link ViewGroup#onInterceptTouchEvent(MotionEvent)}." />
      <item value="is Leap Year" />
      <item value="Set a minimum interval for the axis when zooming in. The axis is not allowed to go below * that limit. This can be used to avoid label duplicating when zooming in." />
      <item value="epoch Second" />
      <item value="Remove a specific decorator instance. Same rules as {@linkplain List#remove(Object)}" />
      <item value="Note, passing true here will &lt;b&gt;not&lt;/b&gt; override minimum and maximum dates, if set. * This will only re-enable disabled dates." />
      <item value="Set days to be in a disabled state, or re-enabled.&lt;/p&gt;" />
      <item value="Set decoration options onto a facade to be applied to all relevant days" />
      <item value="Determine if a specific day should be decorated" />
      <item value="Decorate" />
      <item value="at Time" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1200" />
        <entry key="ENGLISH" value="1201" />
        <entry key="FRENCH" value="1" />
        <entry key="KOREAN" value="92" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>