<application>
  <component name="AppStorage">
    <histories>
      <item value="You can use this to prevent errors from propagating or to supply fallback data should errors be * encountered." />
      <item value="Calls the shared consumer with the error sent via onError for each * SingleObserver that subscribes to the current Single." />
      <item value="** * Instructs a Single to pass control to another Single rather than invoking * {@link SingleObserver#onError(Throwable)} if it encounters an error." />
      <item value="denied" />
      <item value="不支持" />
      <item value="Returns the detail message string of this throwable." />
      <item value="Localized" />
      <item value="Creates a localized description of this throwable. * Subclasses may override this method in order to produce a * locale-specific message. For subclasses that do not override this * method, the default implementation returns the same result as * {@code getMessage()}." />
      <item value="Represents an exception that is a composite of one or more other exceptions. A {@code CompositeException} * does not modify the structure of any exception it wraps, but at print-time it iterates through the list of * Throwables contained in the composite in order to print them all." />
      <item value="Re-subscribe to the current Single if the given predicate returns true when the Single fails * with an onError." />
      <item value="Instructs a Single to pass control to another Single rather than invoking * {@link SingleObserver#onError(Throwable)} if it encounters an error." />
      <item value="Instructs a Single to pass control to another Single rather than invoking" />
      <item value="带瓶设备" />
      <item value="面板" />
      <item value="Link" />
      <item value="拦截器" />
      <item value="Volatile" />
      <item value="Marks the JVM backing field of the annotated property as `volatile`, meaning that writes to this field * are immediately made visible to other threads." />
      <item value="Marks the JVM method generated from the annotated function as `strictfp`, meaning that the precision * of floating point operations performed inside the method needs to be restricted in order to * achieve better portability." />
      <item value="Marks the JVM backing field of the annotated property as `transient`, meaning that it is not * part of the default serialized form of the object." />
      <item value="Marks the JVM method generated from the annotated function as `synchronized`, meaning that the method * will be protected from concurrent execution by multiple threads by the monitor of the instance (or, * for static methods, the class) on which the method is defined." />
      <item value="provisioned" />
      <item value="Retains only elements of this [MutableCollection] that are contained in the given [elements] collection." />
      <item value="subtract" />
      <item value="Returns a set containing all elements that are contained by both this collection and the specified collection." />
      <item value="intersect" />
      <item value="Reduce" />
      <item value="Returns a list containing successive accumulation values generated by applying [operation] from left to right * to each element and current accumulator value that starts with [initial] value." />
      <item value="scan" />
      <item value="reduce" />
      <item value="fold Indexed" />
      <item value="union" />
      <item value="period" />
      <item value="the action called when this Flowable terminates or gets canceled" />
      <item value="In case of a race between a terminal event and a cancellation, the provided {@code onFinally} action * is executed once per subscription." />
      <item value="Calls the specified action after this Flowable signals onError or onCompleted or gets canceled by * the downstream." />
      <item value="Modifies the source Publisher so that it invokes an action when it calls {@code onComplete}." />
      <item value="Either 0 or {@link #POP_BACK_STACK_INCLUSIVE}." />
      <item value="POP BACK STACK INCLUSIVE" />
      <item value="REASON NULL ATTRIBUTE" />
      <item value="Requested element count -3 is less than zero." />
      <item value="It is useful when ViewModel observes some data and you need to clear this subscription to * prevent a leak of this ViewModel." />
      <item value="This method will be called when this ViewModel is no longer used and will be destroyed." />
      <item value="Since clear() is final, this method is still called on mock objects // and in those cases, mBagOfTags is null. It'll always be empty though // because setTagIfAbsent and getTag are not final so we can skip // clearing it" />
      <item value="Emit the [ViewModelEvent.CLEARED] event to * dispose off any subscriptions in the ViewModel." />
      <item value="MulticastLock under-locked com.github.druk.dnssd.DNSSD" />
      <item value="The exception could not be delivered to the consumer because it has already canceled/disposed the flow or the exception has nowhere to go to begin with." />
      <item value="contorl" />
      <item value="Returns a Flowable that emits buffers of items it collects from the source Publisher. The resulting * Publisher emits connected, non-overlapping buffers, each of a fixed duration specified by the * {@code timespan} argument. When the source Publisher completes, the resulting Publisher emits the current buffer * and propagates the notification from the source Publisher. Note that if the source Publisher issues an onError * notification the event is passed on immediately without first emitting the buffer it is in the process of * assembling." />
      <item value="giving up android.os.TransactionTooLargeException: data parcel size 534876 bytes" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1392" />
        <entry key="ENGLISH" value="1393" />
        <entry key="FRENCH" value="1" />
        <entry key="KOREAN" value="92" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>