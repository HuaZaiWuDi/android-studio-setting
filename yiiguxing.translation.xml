<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="has Queued Predecessors" />
      <item value="SIGNAL" />
      <item value="value to indicate the next acquireShared should unconditionally propagate." />
      <item value="cquireShared should unconditionally propagat" />
      <item value="condition" />
      <item value="unparking" />
      <item value="waitStatus value to indicate successor's thread needs unparking." />
      <item value="ParkAfterFailedAcquire" />
      <item value="Park" />
      <item value=" shouldParkAfterFailedAcquire" />
      <item value="predecessor" />
      <item value=".predecessor" />
      <item value="final Node p = node.predecessor" />
      <item value="EXCLUSIVE" />
      <item value="addWaiter(Node.EXCLUSIVE)," />
      <item value="acquire" />
      <item value="strip Trailing Zeros" />
      <item value="Returns a string having leading and trailing whitespace removed." />
      <item value="Returns a string having trailing characters matching the predicate removed." />
      <item value="trim End" />
      <item value="a new BigDecimal instance equivalent to this where the trailing zeros of the unscaled value have been removed." />
      <item value="Returns a new BigDecimal instance with the same value as this but with a unscaled value where the trailing zeros have been removed. If the unscaled value of this has n trailing zeros, then the scale and the precision of the result has been reduced by n. Returns: a new BigDecimal instance equivalent to this where the trailing zeros of the unscaled value have been removed." />
      <item value="Queued" />
      <item value="Abstract Queued Synchronizer" />
      <item value="old Tail" />
      <item value="set Exclusive Owner Thread" />
      <item value="Returns the current value of synchronization state. This operation has memory semantics of a volatile read." />
      <item value="nonfair Try Acquire" />
      <item value="Acquire" />
      <item value="Return the last value given to setDebugUnregister." />
      <item value="swap" />
      <item value="Atomically sets the value to the given updated value if the current value == the expected value." />
      <item value="compare And Set" />
      <item value="Subscribes to the source Flowable on the specified Scheduler and makes sure downstream requests are scheduled there as well." />
      <item value="Atomic Reference" />
      <item value="Asynchronously subscribes Subscribers to this Publisher on the specified Scheduler. If there is a create(FlowableOnSubscribe, BackpressureStrategy) type source up in the chain, it is recommended to use subscribeOn(scheduler, false) instead to avoid same-pool deadlock because requests may pile up behind an eagerblocking emitter." />
      <item value="scheduler – the Scheduler to perform subscription actions on Returns: the source Publisher modified so that its subscriptions happen on the specified Scheduler" />
      <item value="Backpressure: The operator doesn't interfere with backpressure which is determined by the source Publisher's backpressure behavior. Scheduler: You specify which Scheduler this operator will use." />
      <item value="Called after migrations execute to perform additional work. Params: database – The SQLite database." />
      <item value="Set of conflict handling strategies for various Dao methods." />
      <item value="OnConflict strategy constant to abort the transaction. The transaction is rolled back." />
      <item value="OnConflict strategy constant to ignore the conflict. An Insert DAO method that returns the inserted rows ids will return -1 for rows that are not inserted since this strategy will ignore the row if there is a conflict." />
      <item value="IGNORE" />
      <item value="detect Moves" />
      <item value="new Item Statuses" />
      <item value="Convenience for Selection.extendSelection." />
      <item value="If non-null, this is the name of a previous back state to look for; if found, all states up to that state will be popped. The POP_BACK_STACK_INCLUSIVE flag can be used to control whether the named state itself is popped. If null, only the top state is popped." />
      <item value="returns the position of the y-labels" />
      <item value="If this is set to true, the y-axis is inverted which means that low values are on top of the chart, high values on bottom. Params: enabled –" />
      <item value="returns true if drawing the bottom y-axis label entry is enabled Returns:" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2577" />
        <entry key="ENGLISH" value="2578" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="BASQUE" value="1" />
        <entry key="RUSSIAN" value="4" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="11" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1658395529321" />
  </component>
</application>