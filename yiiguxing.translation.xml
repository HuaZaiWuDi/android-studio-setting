<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="Flash Mode" />
      <item value="A set of requirements and priorities used to select a camera or return a filtered set of cameras." />
      <item value="RejectedExecutionException at discretion of {@code RejectedExecutionHandler}, if the task cannot be accepted for execution" />
      <item value="Creates an Executor that uses a single worker thread operating off an unbounded queue. (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.) Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent newFixedThreadPool(1) the returned executor is guaranteed not to be reconfigurable to use additional threads." />
      <item value="When set on a View, this listener method will be called instead of the view's own onApplyWindowInsets method." />
      <item value="Called when a new child is added to this ViewGroup. Overrides should always call super.onViewAdded." />
      <item value="Transforms a passed value to a LSB first byte array with the size of the specified capacity Params: capacity – size of the resulting byte array value – that should be represented as a byte array" />
      <item value="español" />
      <item value="captcha" />
      <item value="Register a listener that will be notified whenever a child view is attached to or detached from RecyclerView. This listener will be called when a LayoutManager or the RecyclerView decides that a child view is no longer needed. If an application associates expensive or heavyweight data with item views, this may be a good place to release or free those resources. Params: listener – Listener to register" />
      <item value="Pattern Run" />
      <item value="&lt;p&gt;The resulting {@link android.view.ViewStructure} is then passed to the autofill service, which parses it looking for views that can be autofilled. If the service finds such views, it returns a data structure to the Android System containing the following optional info: &lt;ul&gt; &lt;li&gt;Datasets used to autofill subsets of views in the activity. &lt;li&gt;Id of views that the service can save their values for future autofilling. &lt;ul&gt; &lt;p&gt;When the service returns datasets, the Android System displays an autofill dataset picker UI associated with the view, when the view is focused on and is part of a dataset. The application can be notified when the UI is shown by registering an {@link AutofillCallback} through {@link registerCallback(AutofillCallback)}. When the user selects a dataset from the UI, all views present in the dataset are autofilled, through calls to {@link Viewautofill(AutofillValue)} or {@link Viewautofill(SparseArray)}. &lt;p&gt;When the service returns ids of savable views, the Android System keeps track of changes made to these views, so they can be used to determine if the autofill save UI is shown later. &lt;p&gt;The context is then finished when one of the following occurs: &lt;ul&gt; &lt;li&gt;{@link commit()} is called or all savable views are gone. &lt;li&gt;{@link cancel()} is called. &lt;ul&gt; &lt;p&gt;Finally, after the autofill context is commited (i.e., not cancelled), the Android System shows an autofill save UI if the value of savable views have changed. If the user selects the option to Save, the current value of the views is then sent to the autofill service. &lt;h3 id=&quot;additional-notes&quot;&gt;Additional notes&lt;h3&gt; &lt;p&gt;It is safe to call &lt;code&gt;AutofillManager&lt;code&gt; methods from any thread." />
      <item value="&lt;p&gt;Typically, the context is automatically created when the first view of the activity is focused because {@code View.onFocusChanged()} indirectly calls {@link notifyViewEntered(View)}. App developers can call {@link requestAutofill(View)} to explicitly create it (for example, a custom view developer could offer a contextual menu action in a text-field view to let users manually request autofill). &lt;p&gt;After the context is created, the Android System creates a {@link android.view.ViewStructure} that represents the view hierarchy by calling {@link ViewdispatchProvideAutofillStructure(android.view.ViewStructure, int)} in the root views of all application windows. By default, {@code dispatchProvideAutofillStructure()} results in subsequent calls to {@link ViewonProvideAutofillStructure(android.view.ViewStructure, int)} and {@link ViewonProvideAutofillVirtualStructure(android.view.ViewStructure, int)} for each view in the hierarchy. &lt;p&gt;The resulting {@link android.view.ViewStructure} is then passed to the autofill service, which parses it looking for views that can be autofilled. If the service finds such views, it returns a data structure to the Android System containing the following optional info:" />
      <item value="&lt;p&gt;The {@link AutofillManager} class provides ways for apps and custom views to integrate with the Autofill Framework lifecycle. &lt;p&gt;To learn about using Autofill in your app, read the &lt;a href=&quot;guidetopicstextautofill&quot;&gt;Autofill Framework&lt;a&gt; guides. &lt;h3 id=&quot;autofill-lifecycle&quot;&gt;Autofill lifecycle&lt;h3&gt; &lt;p&gt;The autofill lifecycle starts with the creation of an autofill context associated with an activity context. The autofill context is created when one of the following methods is called for the first time in an activity context, and the current user has an enabled autofill service: &lt;ul&gt; &lt;li&gt;{@link notifyViewEntered(View)} &lt;li&gt;{@link notifyViewEntered(View, int, Rect)} &lt;li&gt;{@link requestAutofill(View)} &lt;ul&gt; &lt;p&gt;Typically, the context is automatically created when the first view of the activity is focused because {@code View.onFocusChanged()} indirectly calls {@link notifyViewEntered(View)}. App developers can call {@link requestAutofill(View)} to explicitly create it (for example, a custom view developer could offer a contextual menu action in a text-field view to let users manually request autofill). &lt;p&gt;After the context is created, the Android System creates a {@link android.view.ViewStructure} that represents the view hierarchy by calling {@link ViewdispatchProvideAutofillStructure(android.view.ViewStructure, int)} in the root views of all application windows. By default, {@code dispatchProvideAutofillStructure()} results in subsequent calls to {@link ViewonProvideAutofillStructure(android.view.ViewStructure, int)} and {@link ViewonProvideAutofillVirtualStructure(android.view.ViewStructure, int)} for each view in the hierarchy. &lt;p&gt;The resulting {@link android.view.ViewStructure} is then passed to the autofill service, which parses it looking for views that can be autofilled. If the service finds such views, it returns a data structure to the Android System containing the following optional info: &lt;ul&gt; &lt;li&gt;Datasets used to autofill subsets of views in the activity. &lt;li&gt;Id of views that the service can save their values for future autofilling. &lt;ul&gt; &lt;p&gt;When the service returns datasets, the Android System displays an autofill dataset picker UI associated with the view, when the view is focused on and is part of a dataset. The application can be notified when the UI is shown by registering an {@link AutofillCallback} through {@link registerCallback(AutofillCallback)}. When the user selects a dataset from the UI, all views present in the dataset are autofilled, through calls to {@link Viewautofill(AutofillValue)} or {@link Viewautofill(SparseArray)}. &lt;p&gt;When the service returns ids of savable views, the Android System keeps track of changes made to these views, so they can be used to determine if the autofill save UI is shown later. &lt;p&gt;The context is then finished when one of the following occurs: &lt;ul&gt; &lt;li&gt;{@link commit()} is called or all savable views are gone. &lt;li&gt;{@link cancel()} is called. &lt;ul&gt; &lt;p&gt;Finally, after the autofill context is commited (i.e., not cancelled), the Android System shows an autofill save UI if the value of savable views have changed. If the user selects the option to Save, the current value of the views is then sent to the autofill service. &lt;h3 id=&quot;additional-notes&quot;&gt;Additional notes&lt;h3&gt; &lt;p&gt;It is safe to call &lt;code&gt;AutofillManager&lt;code&gt; methods from any thread." />
      <item value="Returns true if the calling application provides a AutofillService that is enabled for the current user, or false otherwise." />
      <item value="Called to indicate the current autofill context should be cancelled. This method is typically called by Views that manage virtual views; for example, when the view is rendering an HTML page with a form and virtual views that represent the HTML elements, it should call this method if the user does not post the form but moves to another form in this page. Note: This method does not need to be called on regular application lifecycle methods such as android.app.Activity.finish()." />
      <item value="If not explicitly specified, this view and its children don't support autofill. &lt;p&gt; This is done because autofill's means of uniquely identifying views doesn't work out of the box with View recycling." />
      <item value="Accessing hidden field LandroidappActivity;-&gt;mAutoFillResetNeeded:Z (greylist-max-o, reflection, denied)" />
      <item value="Sets the mode for determining whether this view is considered important for autofill. The platform determines the importance for autofill automatically but you can use this method to customize the behavior. For example: When the view contents is irrelevant for autofill (for example, a text field used in a &quot;Captcha&quot; challenge), it should be View.IMPORTANT_FOR_AUTOFILL_NO. When both the view and its children are irrelevant for autofill (for example, the root view of an activity containing a spreadhseet editor), it should be View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS. When the view content is relevant for autofill but its children aren't (for example, a credit card expiration date represented by a custom view that overrides the proper autofill methods and has 2 children representing the month and year), it should be View.IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS. NOTE: setting the mode as does View.IMPORTANT_FOR_AUTOFILL_NO or View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS does not guarantee the view (and its children) will be always be considered not important; for example, when the user explicitly makes an autofill request, all views are considered important. See isImportantForAutofill(View) for more details about how the View's importance for autofill is used." />
      <item value="Returns true if autofill is supported by the current device and is supported for this user. Autofill is typically supported, but it could be unsupported in cases like: Low-end devices. Device policy rules that forbid its usage." />
      <item value="Called by android.app.Activity to commit or cancel the session on finish." />
      <item value="Explicitly requests a new autofill context. Normally, the autofill context is automatically started if necessary when notifyViewEntered(View) is called, but this method should be used in the cases where it must be explicitly started. For example, when the view offers an AUTOFILL option on its contextual overflow menu, and the user selects it. Params: view – view requesting the new autofill context." />
      <item value="whether the view is considered important for autofill." />
      <item value="Sets the hints that help an android.service.autofill.AutofillService determine how to autofill the view with the user's data." />
      <item value="Hint the Android System that this view is not important for autofill, but its children (if any) will be traversed.." />
      <item value="Hint the Android System that this view is important for autofill, and its children (if any) will be traversed.." />
      <item value="Let the Android System use its heuristics to determine if the view is important for autofill." />
      <item value="Hints the Android System whether the view node associated with this View should be included in a view structure used for autofill purposes." />
      <item value="Declare AutofillService implementation; only needed for a small number of apps that will be implementing an AutofillService. Framework parses meta-data and sets the service's Settings Activity based on what the meta-data resource points to." />
      <item value="Called to indicate the current autofill context should be commited. This method is typically called by Views that manage virtual views; for example, when the view is rendering an HTML page with a form and virtual views that represent the HTML elements, it should call this method after the form is submitted and another page is rendered. Note: This method does not need to be called on regular application lifecycle methods such as android.app.Activity.finish()." />
      <item value="Hint the Android System that this view is important for autofill, but its children (if any) will not be traversed." />
      <item value="Hint the Android System that this view is not important for autofill, and its children (if any) will not be traversed." />
      <item value="DROP" />
      <item value="RecyclerView listens for Adapter's notify events and calculates the effects of adapter data changes on existing Views. These calculations are used to decide which animations should be run. To support predictive animations, RecyclerView may rewrite or reorder Adapter changes to present the correct state to LayoutManager in pre-layout pass. For example, a newly added item is not included in pre-layout item count because pre-layout reflects the contents of the adapter before the item is added. Behind the scenes, RecyclerView offsets RecyclerView.Recycler.getViewForPosition(int) calls such that LayoutManager does not know about the new item's existence in pre-layout. The item will be available in second layout pass and will be included in the item count. Similar adjustments are made for moved and removed items as well." />
      <item value="Returns the total number of items that can be laid out. Note that this number is not necessarily equal to the number of items in the adapter, so you should always use this number for your position calculations and never access the adapter directly." />
      <item value="get Column Count For Accessibility" />
      <item value="Row count is one more than the last item's row index." />
      <item value="Returns true if Glide should check the AndroidManifest for GlideModules. Implementations should return false after they and their dependencies have migrated to Glide's annotation processor. Returns true by default." />
      <item value="Defines a set of dependencies and options to use when initializing Glide within an application. There can be at most one AppGlideModule in an application. Only Applications can include a AppGlideModule. Libraries must use LibraryGlideModule. Classes that extend AppGlideModule must be annotated with com.bumptech.glide.annotation.GlideModule to be processed correctly. Classes that extend AppGlideModule can optionally be annotated with com.bumptech.glide.annotation.Excludes to optionally exclude one or more LibraryGlideModule andor GlideModule classes. Once an application has migrated itself and all libraries it depends on to use Glide's annotation processor, AppGlideModule implementations should override isManifestParsingEnabled() and return false." />
      <item value="incrementing generation means any currently-running diffs are discarded when they finish" />
      <item value="Expected performance impact from inlining is insignificant. Inlining works best for functions with parameters of functional types" />
      <item value="Expected performance impact from inlining is insignificant. Inlining works best for functions with parameters of functional type" />
      <item value="marquee" />
      <item value="Hide the dialog, but do not dismiss it." />
      <item value="Returns drawables for the start, top, end, and bottom borders." />
      <item value="icon gravity view" />
      <item value="m Icon GRAVITY" />
      <item value="Add a listener for attach state changes. This listener will be called whenever this view is attached or detached from a window. Remove the listener using removeOnAttachStateChangeListener(View.OnAttachStateChangeListener)." />
      <item value="Check whether a particular package has been granted a particular permission. Params: permName – The name of the permission you are checking for. packageName – The name of the package you are checking against. Returns: If the package has the permission, PERMISSION_GRANTED is returned. If it does not have the permission, PERMISSION_DENIED is returned." />
      <item value="true to indicate adapter startup has begun, or false on immediate error" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="3209" />
        <entry key="ENGLISH" value="3221" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="BASQUE" value="1" />
        <entry key="GERMAN" value="5" />
        <entry key="RUSSIAN" value="6" />
        <entry key="FRENCH" value="6" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="13" />
        <entry key="DUTCH" value="1" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="2" />
        <entry key="LATIN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ESPERANTO" value="27" />
        <entry key="SPANISH" value="9" />
        <entry key="ITALIAN" value="6" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1671071274421" />
  </component>
  <component name="Settings">
    <option name="showExplanation" value="true" />
    <option name="showWordsOnStartup" value="true" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1684141008166" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="CHINESE" />
    <option name="translator" value="MICROSOFT" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogX" value="848" />
    <option name="newTranslationDialogY" value="216" />
    <histories>
      <item value="Returns the application's Resources." />
      <item value="Retrieve the resources for an application. Throws NameNotFoundException if the package is no longer installed." />
      <item value="Previously created AssetManager." />
      <item value="Returns the minimum height of the view. Returns: the minimum height the view will try to be, in pixels See Also: setMinimumHeight(int)" />
      <item value="Returns the suggested minimum height that the view should use. This returns the maximum of the view's minimum height and the background's minimum height (Drawable.getMinimumHeight())." />
      <item value="get Suggested Minimum Height" />
      <item value="Version 1 Left-Most is 0" />
      <item value="calc check digit" />
      <item value="shift" />
      <item value="Instead of waiting for a posted onDismiss(), null out the listener and call onDismiss() manually to ensure that the callback happens before onDestroy()" />
      <item value="scan Near Device" />
      <item value="btn scan Near Device" />
      <item value="advertising" />
      <item value="Offloaded" />
      <item value="距离" />
      <item value="juli" />
      <item value="dist" />
      <item value="di's't" />
      <item value="Raises this value to the integer power n." />
      <item value="split Track" />
      <item value="Clamps value to this range." />
      <item value="双开" />
      <item value="The horizontal extent of the scrollbar's thumb" />
      <item value="Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range. This value is used to compute the length of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by computeHorizontalScrollRange() and computeHorizontalScrollOffset(). Default implementation returns 0. If you want to support scroll bars, override RecyclerView.LayoutManager.computeHorizontalScrollExtent(RecyclerView.State) in your LayoutManager. Returns: The horizontal extent of the scrollbar's thumb See Also: RecyclerView.LayoutManager.computeHorizontalScrollExtent(RecyclerView.State)" />
      <item value="Override this method if you want to support scroll bars." />
      <item value="View closest to start of the list. (top or left) endChild – View closest to end of the list (bottom or right)" />
      <item value="compute Scroll Offset" />
      <item value="Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. This value is used to compute the position of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by computeHorizontalScrollRange() and computeHorizontalScrollExtent()." />
      <item value="heck if this view can be scrolled horizontally in a certain direction. This is without regard to whether the view is enabled or not, or if it will scroll in response to user input or not. Params: direction – Negative to check scrolling left, positive to check scrolling right. Returns: true if this view can be scrolled in the specified direction, false otherwise" />
      <item value="Check if this view can be scrolled horizontally in a certain direction. This is without regard to whether the view is enabled or not, or if it will scroll in response to user input or not. Params: direction – Negative to check scrolling left, positive to check scrolling right. Returns: true if this view can be scrolled in the specified direction, false otherwise." />
      <item value="Whether it is possible for the mTarget view of this layout to scroll up. Override this if the mTarget view is a custom view." />
      <item value="May be null. The subset of the bitmap to be drawn" />
      <item value="The rectangle that the bitmap will be scaledtranslated to fit into" />
      <item value="spread" />
      <item value="Sets the one and ONLY color that should be used for this DataSet. Internally, this recreates the colors array and adds the specified color." />
      <item value="ndicates whether this View is currently in edit mode. A View is usually in edit mode when displayed within a developer tool. For instance, if this View is being drawn by a visual user interface builder, this method should return true. Subclasses should check the return value of this method to provide different behaviors if their normal behavior might interfere with the host environment. For instance: the class spawns a thread in its constructor, the drawing code relies on device-specific features, etc. This method is usually checked in the drawing code of custom widgets." />
      <item value="Position in the Y axis from the starting edge that tabs should be positioned from." />
      <item value="交互" />
      <item value="ji'o'a'hu" />
      <item value="及哦啊胡" />
      <item value="Does not do anything to hide gaps." />
      <item value="tab Unbounded Ripple" />
      <item value="Whether to display tab labels horizontally inline with icons, or underneath icons." />
      <item value="The Network Inspector shows all traffic data for the full timeline by default. You can select a range within the timeline to see only the traffic in that range. You can also create and manage rules that help test how your app behaves when encountering different responses such as status codes, response headers, and bodies. The rules determine what responses to intercept and how to modify these responses before they reach the app." />
      <item value="When onMeasure(int, int) is called, if the provided measure specs both have a mode of View.MeasureSpec.EXACTLY, RecyclerView will set its measured dimensions accordingly and return, allowing layout to continue as normal (Actually, RecyclerView will call onMeasure(RecyclerView.Recycler, RecyclerView.State, int, int) for backwards compatibility reasons but it should not be overridden if AutoMeasure is being used). If one of the layout specs is not EXACT, the RecyclerView will start the layout process. It will first process all pending Adapter updates and then decide whether to run a predictive layout. If it decides to do so, it will first call onLayoutChildren(RecyclerView.Recycler, RecyclerView.State) with RecyclerView.State.isPreLayout() set to true. At this stage, getWidth() and getHeight() will still return the width and height of the RecyclerView as of the last layout calculation. After handling the predictive case, RecyclerView will call onLayoutChildren(RecyclerView.Recycler, RecyclerView.State) with RecyclerView.State.isMeasuring() set to true and RecyclerView.State.isPreLayout() set to false. The LayoutManager can access the measurement specs via getHeight(), getHeightMode(), getWidth() and getWidthMode(). After the layout calculation, RecyclerView sets the measured width &amp; height by calculating the bounding box for the children (+ RecyclerView's padding). The LayoutManagers can override setMeasuredDimension(Rect, int, int) to choose different values. For instance, GridLayoutManager overrides this value to handle the case where if it is vertical and has 3 columns but only 2 items, it should still measure its width to fit 3 items, not 2. Any following calls to onMeasure(int, int) will run onLayoutChildren(RecyclerView.Recycler, RecyclerView.State) with RecyclerView.State.isMeasuring() set to true and RecyclerView.State.isPreLayout() set to false. RecyclerView will take care of which views are actually added removed moved changed for animations so that the LayoutManager should not worry about them and handle each onLayoutChildren(RecyclerView.Recycler, RecyclerView.State) call as if it is the last one. When measure is complete and RecyclerView's onLayout(boolean, int, int, int, int) method is called, RecyclerView checks whether it already did layout calculations during the measure pass and if so, it re-uses that information. It may still decide to call onLayoutChildren(RecyclerView.Recycler, RecyclerView.State) if the last measure spec was different from the final dimensions or adapter contents have changed between the measure call and the layout call. Finally, animations are calculated and run as usual." />
      <item value="Returns whether the measuring pass of layout should use the AutoMeasure mechanism of RecyclerView or if it should be done by the LayoutManager's implementation of onMeasure(RecyclerView.Recycler, RecyclerView.State, int, int). This method returns false by default (it actually returns the value passed to the deprecated setAutoMeasureEnabled(boolean)) and should be overridden to return true if a LayoutManager wants to be auto measured by the RecyclerView. If this method is overridden to return true, onMeasure(RecyclerView.Recycler, RecyclerView.State, int, int) should not be overridden. AutoMeasure is a RecyclerView mechanism that handles the measuring pass of layout in a simple and contract satisfying way, including the wrapping of children laid out by LayoutManager. Simply put, it handles wrapping children by calling onLayoutChildren(RecyclerView.Recycler, RecyclerView.State) during a call to onMeasure(int, int), and then calculating desired dimensions based on children's dimensions and positions. It does this while supporting all existing animation capabilities of the RecyclerView." />
      <item value="Implementors of LayoutManager should define whether or not it uses AutoMeasure by overriding isAutoMeasureEnabled()." />
      <item value="Defines whether the measuring pass of layout should use the AutoMeasure mechanism of RecyclerView or if it should be done by the LayoutManager's implementation of onMeasure(RecyclerView.Recycler, RecyclerView.State, int, int)." />
      <item value="Return a resource identifier for the given resource name. A fully qualified resource name is of the form &quot;package:typeentry&quot;. The first two components (package and type) are optional if defType and defPackage, respectively, are specified here. Note: use of this function is discouraged. It is much more efficient to retrieve resources by identifier than by name." />
      <item value="Item at position 0 requires 4 spans but GridLayoutManager has only 2 spans." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="504" />
        <entry key="ENGLISH" value="505" />
        <entry key="GERMAN" value="1" />
      </map>
    </option>
  </component>
</application>