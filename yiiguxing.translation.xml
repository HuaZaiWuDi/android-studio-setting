<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="Flash Mode" />
      <item value="A set of requirements and priorities used to select a camera or return a filtered set of cameras." />
      <item value="RejectedExecutionException at discretion of {@code RejectedExecutionHandler}, if the task cannot be accepted for execution" />
      <item value="Creates an Executor that uses a single worker thread operating off an unbounded queue. (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.) Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent newFixedThreadPool(1) the returned executor is guaranteed not to be reconfigurable to use additional threads." />
      <item value="When set on a View, this listener method will be called instead of the view's own onApplyWindowInsets method." />
      <item value="Called when a new child is added to this ViewGroup. Overrides should always call super.onViewAdded." />
      <item value="Transforms a passed value to a LSB first byte array with the size of the specified capacity Params: capacity – size of the resulting byte array value – that should be represented as a byte array" />
      <item value="español" />
      <item value="captcha" />
      <item value="Register a listener that will be notified whenever a child view is attached to or detached from RecyclerView. This listener will be called when a LayoutManager or the RecyclerView decides that a child view is no longer needed. If an application associates expensive or heavyweight data with item views, this may be a good place to release or free those resources. Params: listener – Listener to register" />
      <item value="Pattern Run" />
      <item value="&lt;p&gt;The resulting {@link android.view.ViewStructure} is then passed to the autofill service, which parses it looking for views that can be autofilled. If the service finds such views, it returns a data structure to the Android System containing the following optional info: &lt;ul&gt; &lt;li&gt;Datasets used to autofill subsets of views in the activity. &lt;li&gt;Id of views that the service can save their values for future autofilling. &lt;ul&gt; &lt;p&gt;When the service returns datasets, the Android System displays an autofill dataset picker UI associated with the view, when the view is focused on and is part of a dataset. The application can be notified when the UI is shown by registering an {@link AutofillCallback} through {@link registerCallback(AutofillCallback)}. When the user selects a dataset from the UI, all views present in the dataset are autofilled, through calls to {@link Viewautofill(AutofillValue)} or {@link Viewautofill(SparseArray)}. &lt;p&gt;When the service returns ids of savable views, the Android System keeps track of changes made to these views, so they can be used to determine if the autofill save UI is shown later. &lt;p&gt;The context is then finished when one of the following occurs: &lt;ul&gt; &lt;li&gt;{@link commit()} is called or all savable views are gone. &lt;li&gt;{@link cancel()} is called. &lt;ul&gt; &lt;p&gt;Finally, after the autofill context is commited (i.e., not cancelled), the Android System shows an autofill save UI if the value of savable views have changed. If the user selects the option to Save, the current value of the views is then sent to the autofill service. &lt;h3 id=&quot;additional-notes&quot;&gt;Additional notes&lt;h3&gt; &lt;p&gt;It is safe to call &lt;code&gt;AutofillManager&lt;code&gt; methods from any thread." />
      <item value="&lt;p&gt;Typically, the context is automatically created when the first view of the activity is focused because {@code View.onFocusChanged()} indirectly calls {@link notifyViewEntered(View)}. App developers can call {@link requestAutofill(View)} to explicitly create it (for example, a custom view developer could offer a contextual menu action in a text-field view to let users manually request autofill). &lt;p&gt;After the context is created, the Android System creates a {@link android.view.ViewStructure} that represents the view hierarchy by calling {@link ViewdispatchProvideAutofillStructure(android.view.ViewStructure, int)} in the root views of all application windows. By default, {@code dispatchProvideAutofillStructure()} results in subsequent calls to {@link ViewonProvideAutofillStructure(android.view.ViewStructure, int)} and {@link ViewonProvideAutofillVirtualStructure(android.view.ViewStructure, int)} for each view in the hierarchy. &lt;p&gt;The resulting {@link android.view.ViewStructure} is then passed to the autofill service, which parses it looking for views that can be autofilled. If the service finds such views, it returns a data structure to the Android System containing the following optional info:" />
      <item value="&lt;p&gt;The {@link AutofillManager} class provides ways for apps and custom views to integrate with the Autofill Framework lifecycle. &lt;p&gt;To learn about using Autofill in your app, read the &lt;a href=&quot;guidetopicstextautofill&quot;&gt;Autofill Framework&lt;a&gt; guides. &lt;h3 id=&quot;autofill-lifecycle&quot;&gt;Autofill lifecycle&lt;h3&gt; &lt;p&gt;The autofill lifecycle starts with the creation of an autofill context associated with an activity context. The autofill context is created when one of the following methods is called for the first time in an activity context, and the current user has an enabled autofill service: &lt;ul&gt; &lt;li&gt;{@link notifyViewEntered(View)} &lt;li&gt;{@link notifyViewEntered(View, int, Rect)} &lt;li&gt;{@link requestAutofill(View)} &lt;ul&gt; &lt;p&gt;Typically, the context is automatically created when the first view of the activity is focused because {@code View.onFocusChanged()} indirectly calls {@link notifyViewEntered(View)}. App developers can call {@link requestAutofill(View)} to explicitly create it (for example, a custom view developer could offer a contextual menu action in a text-field view to let users manually request autofill). &lt;p&gt;After the context is created, the Android System creates a {@link android.view.ViewStructure} that represents the view hierarchy by calling {@link ViewdispatchProvideAutofillStructure(android.view.ViewStructure, int)} in the root views of all application windows. By default, {@code dispatchProvideAutofillStructure()} results in subsequent calls to {@link ViewonProvideAutofillStructure(android.view.ViewStructure, int)} and {@link ViewonProvideAutofillVirtualStructure(android.view.ViewStructure, int)} for each view in the hierarchy. &lt;p&gt;The resulting {@link android.view.ViewStructure} is then passed to the autofill service, which parses it looking for views that can be autofilled. If the service finds such views, it returns a data structure to the Android System containing the following optional info: &lt;ul&gt; &lt;li&gt;Datasets used to autofill subsets of views in the activity. &lt;li&gt;Id of views that the service can save their values for future autofilling. &lt;ul&gt; &lt;p&gt;When the service returns datasets, the Android System displays an autofill dataset picker UI associated with the view, when the view is focused on and is part of a dataset. The application can be notified when the UI is shown by registering an {@link AutofillCallback} through {@link registerCallback(AutofillCallback)}. When the user selects a dataset from the UI, all views present in the dataset are autofilled, through calls to {@link Viewautofill(AutofillValue)} or {@link Viewautofill(SparseArray)}. &lt;p&gt;When the service returns ids of savable views, the Android System keeps track of changes made to these views, so they can be used to determine if the autofill save UI is shown later. &lt;p&gt;The context is then finished when one of the following occurs: &lt;ul&gt; &lt;li&gt;{@link commit()} is called or all savable views are gone. &lt;li&gt;{@link cancel()} is called. &lt;ul&gt; &lt;p&gt;Finally, after the autofill context is commited (i.e., not cancelled), the Android System shows an autofill save UI if the value of savable views have changed. If the user selects the option to Save, the current value of the views is then sent to the autofill service. &lt;h3 id=&quot;additional-notes&quot;&gt;Additional notes&lt;h3&gt; &lt;p&gt;It is safe to call &lt;code&gt;AutofillManager&lt;code&gt; methods from any thread." />
      <item value="Returns true if the calling application provides a AutofillService that is enabled for the current user, or false otherwise." />
      <item value="Called to indicate the current autofill context should be cancelled. This method is typically called by Views that manage virtual views; for example, when the view is rendering an HTML page with a form and virtual views that represent the HTML elements, it should call this method if the user does not post the form but moves to another form in this page. Note: This method does not need to be called on regular application lifecycle methods such as android.app.Activity.finish()." />
      <item value="If not explicitly specified, this view and its children don't support autofill. &lt;p&gt; This is done because autofill's means of uniquely identifying views doesn't work out of the box with View recycling." />
      <item value="Accessing hidden field LandroidappActivity;-&gt;mAutoFillResetNeeded:Z (greylist-max-o, reflection, denied)" />
      <item value="Sets the mode for determining whether this view is considered important for autofill. The platform determines the importance for autofill automatically but you can use this method to customize the behavior. For example: When the view contents is irrelevant for autofill (for example, a text field used in a &quot;Captcha&quot; challenge), it should be View.IMPORTANT_FOR_AUTOFILL_NO. When both the view and its children are irrelevant for autofill (for example, the root view of an activity containing a spreadhseet editor), it should be View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS. When the view content is relevant for autofill but its children aren't (for example, a credit card expiration date represented by a custom view that overrides the proper autofill methods and has 2 children representing the month and year), it should be View.IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS. NOTE: setting the mode as does View.IMPORTANT_FOR_AUTOFILL_NO or View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS does not guarantee the view (and its children) will be always be considered not important; for example, when the user explicitly makes an autofill request, all views are considered important. See isImportantForAutofill(View) for more details about how the View's importance for autofill is used." />
      <item value="Returns true if autofill is supported by the current device and is supported for this user. Autofill is typically supported, but it could be unsupported in cases like: Low-end devices. Device policy rules that forbid its usage." />
      <item value="Called by android.app.Activity to commit or cancel the session on finish." />
      <item value="Explicitly requests a new autofill context. Normally, the autofill context is automatically started if necessary when notifyViewEntered(View) is called, but this method should be used in the cases where it must be explicitly started. For example, when the view offers an AUTOFILL option on its contextual overflow menu, and the user selects it. Params: view – view requesting the new autofill context." />
      <item value="whether the view is considered important for autofill." />
      <item value="Sets the hints that help an android.service.autofill.AutofillService determine how to autofill the view with the user's data." />
      <item value="Hint the Android System that this view is not important for autofill, but its children (if any) will be traversed.." />
      <item value="Hint the Android System that this view is important for autofill, and its children (if any) will be traversed.." />
      <item value="Let the Android System use its heuristics to determine if the view is important for autofill." />
      <item value="Hints the Android System whether the view node associated with this View should be included in a view structure used for autofill purposes." />
      <item value="Declare AutofillService implementation; only needed for a small number of apps that will be implementing an AutofillService. Framework parses meta-data and sets the service's Settings Activity based on what the meta-data resource points to." />
      <item value="Called to indicate the current autofill context should be commited. This method is typically called by Views that manage virtual views; for example, when the view is rendering an HTML page with a form and virtual views that represent the HTML elements, it should call this method after the form is submitted and another page is rendered. Note: This method does not need to be called on regular application lifecycle methods such as android.app.Activity.finish()." />
      <item value="Hint the Android System that this view is important for autofill, but its children (if any) will not be traversed." />
      <item value="Hint the Android System that this view is not important for autofill, and its children (if any) will not be traversed." />
      <item value="DROP" />
      <item value="RecyclerView listens for Adapter's notify events and calculates the effects of adapter data changes on existing Views. These calculations are used to decide which animations should be run. To support predictive animations, RecyclerView may rewrite or reorder Adapter changes to present the correct state to LayoutManager in pre-layout pass. For example, a newly added item is not included in pre-layout item count because pre-layout reflects the contents of the adapter before the item is added. Behind the scenes, RecyclerView offsets RecyclerView.Recycler.getViewForPosition(int) calls such that LayoutManager does not know about the new item's existence in pre-layout. The item will be available in second layout pass and will be included in the item count. Similar adjustments are made for moved and removed items as well." />
      <item value="Returns the total number of items that can be laid out. Note that this number is not necessarily equal to the number of items in the adapter, so you should always use this number for your position calculations and never access the adapter directly." />
      <item value="get Column Count For Accessibility" />
      <item value="Row count is one more than the last item's row index." />
      <item value="Returns true if Glide should check the AndroidManifest for GlideModules. Implementations should return false after they and their dependencies have migrated to Glide's annotation processor. Returns true by default." />
      <item value="Defines a set of dependencies and options to use when initializing Glide within an application. There can be at most one AppGlideModule in an application. Only Applications can include a AppGlideModule. Libraries must use LibraryGlideModule. Classes that extend AppGlideModule must be annotated with com.bumptech.glide.annotation.GlideModule to be processed correctly. Classes that extend AppGlideModule can optionally be annotated with com.bumptech.glide.annotation.Excludes to optionally exclude one or more LibraryGlideModule andor GlideModule classes. Once an application has migrated itself and all libraries it depends on to use Glide's annotation processor, AppGlideModule implementations should override isManifestParsingEnabled() and return false." />
      <item value="incrementing generation means any currently-running diffs are discarded when they finish" />
      <item value="Expected performance impact from inlining is insignificant. Inlining works best for functions with parameters of functional types" />
      <item value="Expected performance impact from inlining is insignificant. Inlining works best for functions with parameters of functional type" />
      <item value="marquee" />
      <item value="Hide the dialog, but do not dismiss it." />
      <item value="Returns drawables for the start, top, end, and bottom borders." />
      <item value="icon gravity view" />
      <item value="m Icon GRAVITY" />
      <item value="Add a listener for attach state changes. This listener will be called whenever this view is attached or detached from a window. Remove the listener using removeOnAttachStateChangeListener(View.OnAttachStateChangeListener)." />
      <item value="Check whether a particular package has been granted a particular permission. Params: permName – The name of the permission you are checking for. packageName – The name of the package you are checking against. Returns: If the package has the permission, PERMISSION_GRANTED is returned. If it does not have the permission, PERMISSION_DENIED is returned." />
      <item value="true to indicate adapter startup has begun, or false on immediate error" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="3209" />
        <entry key="ENGLISH" value="3221" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="BASQUE" value="1" />
        <entry key="GERMAN" value="5" />
        <entry key="RUSSIAN" value="6" />
        <entry key="FRENCH" value="6" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="13" />
        <entry key="DUTCH" value="1" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="2" />
        <entry key="LATIN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ESPERANTO" value="27" />
        <entry key="SPANISH" value="9" />
        <entry key="ITALIAN" value="6" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1671071274421" />
  </component>
  <component name="Settings">
    <option name="showExplanation" value="true" />
    <option name="showWordsOnStartup" value="true" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1685959319792" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="CHINESE" />
    <option name="translator" value="MICROSOFT" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogX" value="848" />
    <option name="newTranslationDialogY" value="216" />
    <histories>
      <item value="destination Offset" />
      <item value="TRAIT_SUPPORTED_NETWORK = FUNCTION_NETWORK_ TRAIT_WiFi_Diagnostics = FUNCTION_NETWORK_C TRAIT_Thread_Diagnostics = FUNCTION_NETWORK TRAIT_Zigbee_Diagnostics = FUNCTION_NETWORK TRAIT_Ethernet_Diagnostics = FUNCTION_NETWO COmmand_AddOrUpdate_WiFi_Network=FUNCTION_N COmmand_AddOrUpdate_WiFi_Network_Response=F COmmand_AddOrUpdate_Thread_Network=FUNCTION COmmand_AddOrUpdate_Thread_Network_Response COmmand_AddOrUpdate_Zigbee_Network=FUNCTION COmmand_AddOrUpdate_Zigbee_Network_Response" />
      <item value="Function Network Commissioning" />
      <item value="Called when the initialization queue is complete." />
      <item value="Are we done with initializing?" />
      <item value="This method is not final, as some Managers may be created with BluetoothDevice in a constructor. Those can return the device object even without calling connect(device)." />
      <item value="Returns the Bluetooth device object used in connect(BluetoothDevice). Returns: The Bluetooth device or null, if connect(BluetoothDevice) wasn't called." />
      <item value="positive" />
      <item value="negative Txt" />
      <item value="鉴权" />
      <item value="认证" />
      <item value="0000 FCB 9" />
      <item value="If there is a security manager, and the socket is not currently connected to a remote address, this method first performs some security checks. First, if p.getAddress().isMulticastAddress() is true, this method calls the security manager's checkMulticast method with p.getAddress() as its argument. If the evaluation of that expression is false, this method instead calls the security manager's checkConnect method with arguments p.getAddress().getHostAddress() and p.getPort(). Each call to a security manager method could result in a SecurityException if the operation is not allowed." />
      <item value="Sends a datagram packet from this socket. The DatagramPacket includes information indicating the data to be sent, its length, the IP address of the remote host, and the port number on the remote host." />
      <item value="Keep a reference to the value callback, as it may change during execution" />
      <item value="Causes the Runnable r to be added to the message queue. The runnable will be run on the thread to which this handler is attached." />
      <item value="This method should return true if the packet matches the filter and should be processed by the request." />
      <item value="Method called when packet has been sent and confirmed (when Write With Response was used), or added to local outgoing buffer (when Write Without Response was used)." />
      <item value="if the data received are equal to data sent." />
      <item value="rue, if the data received are equal to data sent." />
      <item value="Callback received each time the value was written to a characteristic or descriptor, or was read from the server characteristic or descriptor." />
      <item value="a Flowable that emits the items from the source Publisher so long as each item satisfies the condition defined by predicate, then completes" />
      <item value="Returns a Flowable that emits items emitted by the source Publisher, checks the specified predicate for each item, and then completes when the condition is satisfied." />
      <item value="a Flowable that first emits items emitted by the source Publisher, checks the specified condition after each item, and then completes when the condition is satisfied." />
      <item value="a Flowable that emits the items emitted by the source Publisher until such time as other emits its first item" />
      <item value="Returns a Flowable that emits the items emitted by the source Publisher until a second Publisher emits an item." />
      <item value="eturns a Flowable that emits the items emitted by the source Publisher until a second Publisher emits an item." />
      <item value="Returns a Flowable that emits items emitted by the source Publisher so long as each item satisfied a specified condition, and then completes as soon as this condition is not satisfied." />
      <item value="true if this set did not already contain the specified element" />
      <item value="A generic unordered collection of elements that does not support duplicate elements, and supports adding and removing elements." />
      <item value="return bleScanResult?.rssi?.compareTo(other.bleScanResult?.rssi?:0)?:0" />
      <item value="Compares this object with the specified object for order. Returns zero if this object is equal to the specified other object, a negative number if it's less than other, or a positive number if it's greater than other." />
      <item value="Returns a new Publisher by applying a function that you supply to each item emitted by the source Publisher that returns a Publisher, and then emitting the items emitted by the most recently emitted of these Publishers. The resulting Publisher completes if both the upstream Publisher and the last inner Publisher, if any, complete. If the upstream Publisher signals an onError, the inner Publisher is canceled and the error delivered in-sequence." />
      <item value="delay errors signaled by any of the source Publisher until all Publishers terminate" />
      <item value="delay errors from any of the source Publishers till the other terminates" />
      <item value="zip does not operate by default on a particular Scheduler." />
      <item value="zip applies this function in strict sequence, so the first item emitted by the new Publisher will be the result of the function applied to the first item emitted by o1 and the first item emitted by o2; the second item emitted by the new Publisher will be the result of the function applied to the second item emitted by o1 and the second item emitted by o2; and so forth. The resulting Publisher&lt;R&gt; returned from zip will invoke onNext as many times as the number of onNext invocations of the source Publisher that emits the fewest items. The operator subscribes to its sources in the order they are specified and completes eagerly if one of the sources is shorter than the rest while canceling the other sources. Therefore, it is possible those other sources will never be able to run to completion (and thus not calling doOnComplete()). This can also happen if the sources are exactly the same length; if source A completes and B has been consumed and is about to complete, the operator detects A won't be sending further values and it will cancel B immediately. For example: zip(range(1, 5).doOnComplete(action1), range(6, 5).doOnComplete(action2), (a, b) -&gt; a + b) action1 will be called but action2 won't. To work around this termination property, use doOnCancel(Action) as well or use using() to do cleanup in case of completion or cancellation." />
      <item value="This behaves like merge(Publisher, Publisher) except that if any of the merged Publishers notify of an error via onError, mergeDelayError will refrain from propagating that error notification until all of the merged Publishers have finished emitting items." />
      <item value="If any of the source Publishers signal a Throwable via onError, the resulting Flowable terminates with that Throwable and all other source Publishers are canceled. If more than one Publisher signals an error, the resulting Flowable may terminate with the first one's error or, depending on the concurrency of the sources, may terminate with a CompositeException containing two or more of the various error signals. Throwables that didn't make into the composite will be sent (individually) to the global error handler via RxJavaPlugins.onError(Throwable) method as UndeliverableException errors. Similarly, Throwables signaled by source(s) after the returned Flowable has been canceled or terminated with a (composite) error will be sent to the same global error handler. Use mergeDelayError(Publisher, Publisher) to merge sources and terminate only when all source Publishers have completed or failed with an error." />
      <item value="批量" />
      <item value="The source did not signal an event for 15 seconds and has been terminated." />
      <item value="a Flowable that emits only the first count items emitted by the source Publisher, or all of the items from the source Publisher if that Publisher emits fewer than count items" />
      <item value="Returns a Flowable that emits only the first count items emitted by the source Publisher. If the source emits fewer than count items then all of its items are emitted." />
      <item value="Flattens a Publisher that emits Publishers into a single Publisher that emits the items emitted by those Publishers, without any transformation." />
      <item value="Specify a maximum height size for the widget. It will only apply if the size of the widget is set to MATCH_CONSTRAINT. Don't apply if the widget is part of a vertical chain." />
      <item value="Occupied" />
      <item value="Flag indicates to a BrowseListener that another result is queued. Applications should not update their UI to display browse results if the MORE_COMING flag is set; they will be called at least once more with the flag clear." />
      <item value="If flag is set, a name conflict will trigger an exception when registering non-shared records. A name must be explicitly specified when registering a service if this bit is set (i.e. the default name may not not be used)." />
      <item value="Set flag when calling enumerateDomains() to restrict results to domains recommended for registration." />
      <item value="Maximum length, in bytes, of a domain name represented as an escaped C-String." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="730" />
        <entry key="ENGLISH" value="731" />
        <entry key="FRENCH" value="1" />
        <entry key="GERMAN" value="1" />
      </map>
    </option>
  </component>
</application>