<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="The RecyclerView is currently animating to a final position while not under outside control. See Also: getScrollState()" />
      <item value="SCROLL STATE SETTLING" />
      <item value="Scroll has initiated, prevent parents from intercepting" />
      <item value="find Intercepting On Item Touch Listener" />
      <item value="The adapter position of the first visible item or RecyclerView.NO_POSITION if there aren't any visible items." />
      <item value="Returns the adapter position of the first visible view. This position does not include adapter changes that were dispatched after the last layout pass." />
      <item value="laid Out Range" />
      <item value="laid Out Area" />
      <item value="smooth scrollbar enabled. try to estimate better." />
      <item value="The total horizontal range represented by the vertical scrollbar" />
      <item value="verride this method if you want to support scroll bars." />
      <item value="The total vertical range represented by the vertical scrollbar" />
      <item value="The vertical offset of the scrollbar's thumb" />
      <item value="The horizontal extent of the scrollbar's thumb" />
      <item value="We're already in this state, assume our ancestors are too" />
      <item value="True if the child does not want the parent to intercept touch events." />
      <item value="The horizontal offset of the scrollbar's thumb" />
      <item value="The range is expressed in arbitrary units that must be the same as the units used by computeHorizontalScrollRange() and computeHorizontalScrollExtent()." />
      <item value="Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. This value is used to compute the length of the thumb within the scrollbar's track." />
      <item value="SCROLL STATE DRAGGING" />
      <item value="Check if this view can be scrolled horizontally in a certain direction. Params: direction â€“ Negative to check scrolling left, positive to check scrolling right. Returns: true if this view can be scrolled in the specified direction, false otherwise." />
      <item value="has Queued Predecessors" />
      <item value="SIGNAL" />
      <item value="value to indicate the next acquireShared should unconditionally propagate." />
      <item value="cquireShared should unconditionally propagat" />
      <item value="condition" />
      <item value="unparking" />
      <item value="waitStatus value to indicate successor's thread needs unparking." />
      <item value="ParkAfterFailedAcquire" />
      <item value="Park" />
      <item value=" shouldParkAfterFailedAcquire" />
      <item value="predecessor" />
      <item value=".predecessor" />
      <item value="final Node p = node.predecessor" />
      <item value="EXCLUSIVE" />
      <item value="addWaiter(Node.EXCLUSIVE)," />
      <item value="acquire" />
      <item value="strip Trailing Zeros" />
      <item value="Returns a string having leading and trailing whitespace removed." />
      <item value="Returns a string having trailing characters matching the predicate removed." />
      <item value="trim End" />
      <item value="a new BigDecimal instance equivalent to this where the trailing zeros of the unscaled value have been removed." />
      <item value="Returns a new BigDecimal instance with the same value as this but with a unscaled value where the trailing zeros have been removed. If the unscaled value of this has n trailing zeros, then the scale and the precision of the result has been reduced by n. Returns: a new BigDecimal instance equivalent to this where the trailing zeros of the unscaled value have been removed." />
      <item value="Queued" />
      <item value="Abstract Queued Synchronizer" />
      <item value="old Tail" />
      <item value="set Exclusive Owner Thread" />
      <item value="Returns the current value of synchronization state. This operation has memory semantics of a volatile read." />
      <item value="nonfair Try Acquire" />
      <item value="Acquire" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2599" />
        <entry key="ENGLISH" value="2600" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="BASQUE" value="1" />
        <entry key="RUSSIAN" value="4" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="11" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1658395529321" />
  </component>
</application>