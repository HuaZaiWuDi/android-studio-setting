<application>
  <component name="AppStorage">
    <histories>
      <item value="the length of the window of time that must pass after the emission of an item from the source * ObservableSource in which that ObservableSource emits no items in order for the item to be emitted by the * resulting ObservableSource" />
      <item value="Returns an Observable that emits records of the time interval between consecutive items emitted by the * source ObservableSource." />
      <item value="Returns an Observable that mirrors the source ObservableSource, except that it drops items emitted by the * source ObservableSource that are followed by newer items before a timeout value expires on a specified * Scheduler. The timer resets on each emission." />
      <item value="Returns an Observable that mirrors the source ObservableSource, except that it drops items emitted by the * source ObservableSource that are followed by newer items before a timeout value expires. The timer resets on * each emission (alias to {@link #debounce(long, TimeUnit, Scheduler)})." />
      <item value="throttle" />
      <item value="an Observable that emits only the first {@code count} items emitted by the source ObservableSource, or * all of the items from the source ObservableSource if that ObservableSource emits fewer than {@code count} items" />
      <item value="Returns an Observable that emits only the first {@code count} items emitted by the source ObservableSource. If the source emits fewer than * {@code count} items then all of its items are emitted." />
      <item value="Returns an Observable that mirrors the source ObservableSource but applies a timeout policy for each emitted * item. If the next item isn't emitted within the specified timeout duration starting from its predecessor, * the resulting ObservableSource terminates and notifies observers of a {@code TimeoutException}." />
      <item value="FORTIFY: FD_SET: file descriptor 1028 &gt;= FD_SETSIZE 1024" />
      <item value="Fatal signal 6 (SIGABRT), code -1 (SI_QUEUE) in tid 26850 (Thread-55), pid 26134 (ice_join_config)" />
      <item value="deploy" />
      <item value="重构" />
      <item value="Saves no data to cache." />
      <item value="Caches remote data with both {@link #DATA} and {@link #RESOURCE}, and local data with {@link * #RESOURCE} only." />
      <item value="Writes retrieved data directly to the disk cache before it's decoded." />
      <item value="Writes resources to disk after they've been decoded." />
      <item value="Tries to intelligently choose a strategy based on the data source of the {@link * com.bumptech.glide.load.data.DataFetcher} and the {@link * com.bumptech.glide.load.EncodeStrategy} of the {@link com.bumptech.glide.load.ResourceEncoder} * (if an {@link com.bumptech.glide.load.ResourceEncoder} is available)." />
      <item value="Start the target Fragment and pop itself" />
      <item value="If you want to begin another FragmentTransaction immediately after popTo(), use this method." />
      <item value="the period of time each buffer collects items before it is emitted and replaced with a new * buffer" />
      <item value="Kettle" />
      <item value="No Such Method Error" />
      <item value="artifact" />
      <item value="artifact Id" />
      <item value="inner" />
      <item value="{@link Handler} to specify the thread upon which the callback will be invoked." />
      <item value="The {@link NetworkCallback} to be utilized for this request. Note * the callback must not be shared - it uniquely specifies this request. * The callback is invoked on the default internal Handler." />
      <item value="Determines if the specified {@code Object} is assignment-compatible * with the object represented by this {@code Class}. This method is * the dynamic equivalent of the Java language {@code instanceof} * operator. The method returns {@code true} if the specified * {@code Object} argument is non-null and can be cast to the * reference type represented by this {@code Class} object without * raising a {@code ClassCastException.} It returns {@code false} * otherwise." />
      <item value="Determines if the specified {@code Class} object represents an * interface type." />
      <item value="is Assignable From" />
      <item value="true if {@code obj} is an instance of this class" />
      <item value="条件" />
      <item value="Callback on interrupt." />
      <item value="Callback after navigation." />
      <item value="BE ATTENTION TO THIS METHOD WAS &lt;P&gt;SET, NOT ADD!&lt;/P&gt;" />
      <item value="不同意" />
      <item value="analyze" />
      <item value="You can use this to prevent errors from propagating or to supply fallback data should errors be * encountered." />
      <item value="Calls the shared consumer with the error sent via onError for each * SingleObserver that subscribes to the current Single." />
      <item value="** * Instructs a Single to pass control to another Single rather than invoking * {@link SingleObserver#onError(Throwable)} if it encounters an error." />
      <item value="denied" />
      <item value="不支持" />
      <item value="Returns the detail message string of this throwable." />
      <item value="Localized" />
      <item value="Creates a localized description of this throwable. * Subclasses may override this method in order to produce a * locale-specific message. For subclasses that do not override this * method, the default implementation returns the same result as * {@code getMessage()}." />
      <item value="Represents an exception that is a composite of one or more other exceptions. A {@code CompositeException} * does not modify the structure of any exception it wraps, but at print-time it iterates through the list of * Throwables contained in the composite in order to print them all." />
      <item value="Re-subscribe to the current Single if the given predicate returns true when the Single fails * with an onError." />
      <item value="Instructs a Single to pass control to another Single rather than invoking * {@link SingleObserver#onError(Throwable)} if it encounters an error." />
      <item value="Instructs a Single to pass control to another Single rather than invoking" />
      <item value="带瓶设备" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1429" />
        <entry key="ENGLISH" value="1430" />
        <entry key="FRENCH" value="1" />
        <entry key="KOREAN" value="92" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>