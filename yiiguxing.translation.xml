<application>
  <component name="AppStorage">
    <histories>
      <item value="localizd" />
      <item value="related" />
      <item value="Disable the keyguard from showing. If the keyguard is currently * showing, hide it. The keyguard will be prevented from showing again * until {@link #reenableKeyguard()} is called." />
      <item value="Neither user 10199 nor current process has android.permission.WAKE_LOCK." />
      <item value="area" />
      <item value="effect" />
      <item value="Computes the coordinates of this view in its window. The argument * must be an array of two integers. After the method returns, the array * contains the x and y location in that order." />
      <item value="Sets [effect] of the spot of [Target]." />
      <item value="Sets [OnTargetListener] to notify the state of [Target]." />
      <item value="Sets an anchor point to start [Target]." />
      <item value="Sets a pointer to start a [Target]." />
      <item value="Sets [overlay] to be laid out to describe [Target]." />
      <item value="Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they * are no longer interested in receiving events." />
      <item value="Retains only elements of this [MutableList] that match the given [predicate]." />
      <item value="Removes all elements from this [MutableList] that match the given [predicate]." />
      <item value="Returns a list containing only elements matching the given [predicate]." />
      <item value="Returns a list containing first elements satisfying the given [predicate]." />
      <item value="Returns a list containing all elements except first elements that satisfy the given [predicate]." />
      <item value="AVATAR" />
      <item value="Prop" />
      <item value="AUTOMATION" />
      <item value="Automation" />
      <item value="Start the target Fragment and pop itself" />
      <item value="Pop the child fragment." />
      <item value="Git Extender adds an option to Update All local branches tracking a remote for all git roots in the current project Local branches that will be updated are the branches that exist locally and have been configured to track a remote branch. It requires IDE version 2016.3 or higher and Java 8 It tries to fast-forward commits in remote branches to local branches. It can be configured through the settings to attempt a simple merge, if the local branch cannot be merged to the tracked remote using fast-forward only. In this case, if there are conflict errors, the merge will be aborted and an error notification will be shown. The update, then, should be performed manually for the reported branch, in order to resolve the conflicts. Any possible uncommitted changes to the current branch will be stashed After updating a branch, if there were any file changes, they will be displayed in IntelliJ Version Control tab. Currently, the correct list of file changes (updated, created, removed) will be displayed. However, when performing a diff for files in a branch other than the currently checked out, the diff will most probably be incorrect. This plugin is available under Apache License, Version 2.0" />
      <item value="Provides a shortcut to open a file or commit in GitHub, Bitbucket, GitLab, Gitea, Gogs or GitBlit using the default browser. A Shortcut is also available to copy links to your clipboard. After installing select your remote host in Settings → Other Settings → GitLink. Make sure you have registered your project's root under the version control settings. Preferences → Version Control (see unregistered roots) To open a file in the default browser select View → Open in (your selected host). Shortcuts are also available on the annotation gutter and VCS log window. Note: When viewing a file, the URL generated references the current commit unless that commit does not exist on the remote repository in which case it references the current branch instead. If the current branch also does not exist on the remote repository the default branch defined in the plugin configuration is used instead." />
      <item value="Plugin that clears commit message from commit window after a successful commit. After installation, plugin will be enabled by default. To toggle it on and off, use VCS (menu) -&gt; Clear message on successful commit" />
      <item value="Extends Git Integration with additional features Status display, auto fetch, inline blame annotation, commit dialog completion, behind notifications and more." />
      <item value="internal" />
      <item value="error: failed linking file resources." />
      <item value="abnormal" />
      <item value="场景" />
      <item value="关联" />
      <item value=" behind" />
      <item value="Returns a Single that emits only the very first item emitted by this Observable or * signals a {@link NoSuchElementException} if this Observable is empty." />
      <item value="Returns a Single that emits only the very first item emitted by the source ObservableSource, or a default item * if the source ObservableSource completes without emitting any items." />
      <item value="One of the verbs defined by * {@link android.widget.RelativeLayout RelativeLayout}, such as * ALIGN_WITH_PARENT_LEFT." />
      <item value="场景面板" />
      <item value="Negative" />
      <item value="Returns true if the final {@link #onDestroy()} call has been made * on the Activity, so this instance is now dead." />
      <item value="Category" />
      <item value="Bonjour" />
      <item value="Starts a Bonjour service discovery for the provided service type with the given {@link Driver}. * &lt;p&gt; * The stream will immediately end with an {@link IllegalBonjourTypeException} * if the input type does not obey Bonjour type specifications. * If you intend to use this method with arbitrary types that can be provided by user input, * it is highly encouraged to verify this input * using {@link #isBonjourType(String)} &lt;b&gt;before&lt;/b&gt; calling this method!" />
      <item value="confirm" />
      <item value="If true, delivers the most recent sticky event (posted with * {@link EventBus#postSticky(Object)}) to this subscriber (if event available)." />
      <item value="Posts the given event to the event bus and holds on to the event (because it is sticky). The most recent sticky * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}." />
      <item value="m Pos Dev Service Name Format Pattern" />
      <item value="Indicates that the operation failed because it is already active." />
      <item value="* The lookup key for an int that indicates whether network service discovery is enabled * or disabled. Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}." />
      <item value="COMMAND" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="111" />
        <entry key="ENGLISH" value="112" />
        <entry key="FRENCH" value="2" />
        <entry key="CATALAN" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
</application>