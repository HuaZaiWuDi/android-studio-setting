<application>
  <component name="AppStorage">
    <histories>
      <item value="Glide" />
      <item value="lunarch" />
      <item value="启动" />
      <item value="跳转" />
      <item value="lunch" />
      <item value="lunach" />
      <item value="inferred type is ZXingScanFragment but Fragment was expected" />
      <item value="More than one file was found with OS independent path" />
      <item value="Duplicate" />
      <item value="The crop rectangle specifies the region of valid pixels in the image, * using coordinates in the largest-resolution plane." />
      <item value="Get the crop rectangle associated with this frame." />
      <item value="Return the arguments supplied when the fragment was instantiated." />
      <item value="Continuously" />
      <item value="计算" />
      <item value="container" />
      <item value="策略" />
      <item value="transitive" />
      <item value="Obtain the screen density to calculate the viewfinder's rectangle." />
      <item value="Area" />
      <item value="3. Calculate the viewfinder's rectangle, which in the middle of the layout. //Set the scanning area. (Optional. Rect can be null. If no settings are specified, it will be located in the middle of the layout.)" />
      <item value="Correction" />
      <item value="Calculate the viewfinder's rectangle, which in the middle of the layout. //Set the scanning area. (Optional. Rect can be null. If no settings are specified, it will be located in the middle of the layout.)" />
      <item value="Obtain the screen size." />
      <item value="CHARACTER SET" />
      <item value="quit Synchronously" />
      <item value="We're decoding as fast as possible, so when one decode fails, start another." />
      <item value="Got product query message" />
      <item value="Hybrid Binarizer" />
      <item value="Hybrid" />
      <item value="This class is the core bitmap class used by ZXing to represent 1 bit data. Reader objects * accept a BinaryBitmap and attempt to decode it." />
      <item value="Allowed lengths of encoded data -- reject anything else. Maps to an {@code int[]}." />
      <item value="The caller needs to be notified via callback when a possible {@link ResultPoint} * is found. Maps to a {@link ResultPointCallback}." />
      <item value="Encapsulates a type of hint that a caller may pass to a barcode reader to help it * more quickly or accurately decode it. It is up to implementations to decide what, * if anything, to do with the information that is supplied." />
      <item value="Unspecified, application-specific hint. Maps to an unspecified {@link Object}." />
      <item value="corner" />
      <item value="Draw the exterior (i.e. outside the framing rect) darkened" />
      <item value="Sets the source information of the image being processed by detectors, including size and * whether it is flipped, which informs how to transform image coordinates later" />
      <item value="Graphic" />
      <item value="the denominator of the rational" />
      <item value="the numerator of the rational" />
      <item value="The signs of the numerator and the denominator may be flipped such that the denominator * is always positive. Both the numerator and denominator will be converted to their reduced * forms (see {@link #equals} for more details).&lt;/p&gt;" />
      <item value="Create a {@code Rational} with a given numerator and denominator.&lt;/p&gt;" />
      <item value="Sets the layout direction of the {@link ViewPort}." />
      <item value="The viewPort which represents the visible camera sensor rect." />
      <item value="val aspectRatio = Rational(viewFinder.width, viewFinder.height) * val viewport = ViewPort.Builder(aspectRatio, preview.getTargetRotation()).build()" />
      <item value="aspect ratio of the output crop rect if the scale type * is FILL_START, FILL_CENTER or FILL_END. This is usually the * width/height of the preview viewfinder that displays the camera * feed. The value is ignored if the scale type is FIT." />
      <item value="The aspect ratio is the ratio of width to height in the sensor orientation." />
      <item value="It is not allowed to set both target aspect ratio and target resolution on the same * use case. Attempting so will throw an IllegalArgumentException when building the Config." />
      <item value="The target aspect ratio is used as a hint when determining the resulting output aspect * ratio which may differ from the request, possibly due to device constraints. * Application code should check the resulting output's resolution and the resulting * aspect ratio may not be exactly as requested." />
      <item value="If not set, resolutions with aspect ratio 4:3 will be considered in higher * priority." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1667" />
        <entry key="ENGLISH" value="1668" />
        <entry key="FRENCH" value="1" />
        <entry key="KOREAN" value="92" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="JAPANESE" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>