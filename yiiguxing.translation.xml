<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="grid Cell" />
      <item value="栅格单元" />
      <item value="shan'ge" />
      <item value="单元" />
      <item value="Gets the size of the display, in pixels. Value returned by this method does not necessarily represent the actual raw size (native resolution) of the display. 1. The returned size may be adjusted to exclude certain system decor elements that are always visible. 2. It may be scaled to provide compatibility with older applications that were originally designed for smaller displays. 3. It can be different depending on the WindowManager to which the display belongs. - If requested from non-Activity context (e.g. Application context via (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE)) it will report the size of the entire display based on current rotation and with subtracted system decoration areas. - If requested from activity (either using getWindowManager() or (WindowManager) getSystemService(Context.WINDOW_SERVICE)) resulting size will correspond to current app window size. In this case it can be smaller than physical size in multi-window mode. Typically for the purposes of layout apps should make a request from activity context to obtain size available for the app content. Params: outSize – A Point object to receive the size information." />
      <item value="Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell wm size). Params: outSize – Set to the real size of the display." />
      <item value="view Ratio" />
      <item value="animate – true to animate between the current and target values or false to not animate" />
      <item value="反转" />
      <item value="fan'z" />
      <item value="sin" />
      <item value="houseservice" />
      <item value="全屋" />
      <item value="全屋服务" />
      <item value="离线" />
      <item value="Attach类型的列表弹窗" />
      <item value="the popup's x location offset" />
      <item value="align To Anchor" />
      <item value="above Anchor" />
      <item value="Display the content view in a popup window at the specified location. If the popup window cannot fit on screen, it will be clipped. See WindowManager.LayoutParams for more information on how gravity and the x and y parameters are related. Specifying a gravity of Gravity.NO_GRAVITY is similar to specifying Gravity.LEFT | Gravity.TOP." />
      <item value="parent – a parent view to get the View.getWindowToken() token from gravity – the gravity which controls the placement of the popup window x – the popup's x location offset y – the popup's y location offset" />
      <item value="request Disallow Intercept Touch Event" />
      <item value="&lt;!-- card容器--&gt; &lt;FrameLayout android:id=&quot;@+idlayout_container&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintEnd_toEndOf=&quot;parent&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; tools:layout_height=&quot;300dp&quot; tools:layout_width=&quot;300dp&quot; &gt;" />
      <item value="Returns the height that is currently relevant to the LayoutManager. This value is usually equal to the laid out height of the RecyclerView but may reflect the current View.MeasureSpec height if the RecyclerView.LayoutManager is using AutoMeasure and the RecyclerView is in the process of measuring. The LayoutManager must always use this method to retrieve the height relevant to it at any given time. Returns: Height in pixels" />
      <item value="Return the width measurement spec mode that is currently relevant to the LayoutManager. This value is set only if the LayoutManager opts into the AutoMeasure api via setAutoMeasureEnabled(boolean)." />
      <item value="When RecyclerView is running a layout, this value is always set to View.MeasureSpec.EXACTLY even if it was measured with a different spec mode." />
      <item value="other Dir Spec Mode" />
      <item value="Returns the space occupied by this View in the current orientation including decorations and margins." />
      <item value="flexible In Other Dir" />
      <item value="m Infinite" />
      <item value="remaining Space" />
      <item value="desired" />
      <item value="Chooses a size from the given specs and parameters that is closest to the desired size and also complies with the spec. Params: spec – The measureSpec desired – The preferred measurement min – The minimum value Returns: A size that fits to the given specs" />
      <item value="Returns whether the measuring pass of layout should use the AutoMeasure mechanism of RecyclerView or if it should be done by the LayoutManager's implementation of onMeasure(RecyclerView.Recycler, RecyclerView.State, int, int). This method returns false by default (it actually returns the value passed to the deprecated setAutoMeasureEnabled(boolean)) and should be overridden to return true if a LayoutManager wants to be auto measured by the RecyclerView. If this method is overridden to return true, onMeasure(RecyclerView.Recycler, RecyclerView.State, int, int) should not be overridden. AutoMeasure is a RecyclerView mechanism that handles the measuring pass of layout in a simple and contract satisfying way, including the wrapping of children laid out by LayoutManager. Simply put, it handles wrapping children by calling onLayoutChildren(RecyclerView.Recycler, RecyclerView.State) during a call to onMeasure(int, int), and then calculating desired dimensions based on children's dimensions and positions. It does this while supporting all existing animation capabilities of the RecyclerView. More specifically:" />
      <item value="Defines whether the measuring pass of layout should use the AutoMeasure mechanism of RecyclerView or if it should be done by the LayoutManager's implementation of onMeasure(RecyclerView.Recycler, RecyclerView.State, int, int). Deprecated Implementors of LayoutManager should define whether or not it uses AutoMeasure by overriding isAutoMeasureEnabled(). Params: enabled – True if layout measurement should be done by the RecyclerView, false if it should be done by this LayoutManager. See Also: isAutoMeasureEnabled()" />
      <item value="Return the width measurement spec mode that is currently relevant to the LayoutManager. This value is set only if the LayoutManager opts into the AutoMeasure api via setAutoMeasureEnabled(boolean). When RecyclerView is running a layout, this value is always set to View.MeasureSpec.EXACTLY even if it was measured with a different spec mode. Returns: Width measure spec mode See Also: View.MeasureSpec.getMode(int)" />
      <item value="Returns the MeasureSpec mode for the perpendicular orientation from the LayoutManager. Returns: The current measure spec mode. See Also: View.MeasureSpec, RecyclerView.LayoutManager.getWidthMode(), RecyclerView.LayoutManager.getHeightMode()" />
      <item value="Returns the MeasureSpec mode for the perpendicular orientation from the LayoutManager. Returns: The current measure spec mode." />
      <item value="Measure specification mode: The child can be as large as it wants up to the specified size." />
      <item value="Calculate a MeasureSpec value for measuring a child view in one dimension. Params: parentSize – Size of the parent view where the child will be placed parentMode – The measurement spec mode of the parent padding – Total space currently consumed by other elements of parent childDimension – Desired size of the child view, or MATCH_PARENTWRAP_CONTENT. Generally obtained from the child view's LayoutParams canScroll – true if the parent RecyclerView can scroll in this dimension Returns: a MeasureSpec value for the child view" />
      <item value="A MeasureSpec encapsulates the layout requirements passed from parent to child. Each MeasureSpec represents a requirement for either the width or the height. A MeasureSpec is comprised of a size and a mode. There are three possible modes: UNSPECIFIED The parent has not imposed any constraint on the child. It can be whatever size it wants. EXACTLY The parent has determined an exact size for the child. The child is going to be given those bounds regardless of how big it wants to be. AT_MOST The child can be as large as it wants up to the specified size. MeasureSpecs are implemented as ints to reduce object allocation. This class is provided to pack and unpack the &lt;size, mode&gt; tuple into the int." />
      <item value="Measure specification mode: The parent has determined an exact size for the child. The child is going to be given those bounds regardless of how big it wants to be." />
      <item value="EXACTLY" />
      <item value="Measure specification mode: The parent has not imposed any constraint on the child. It can be whatever size it wants." />
      <item value="available Space In Other" />
      <item value="Measures a child with currently known information. This is not necessarily the child's final measurement. (see fillChunk for details). Params: view – The child view to be measured otherDirParentSpecMode – The RV measure spec that should be used in the secondary orientation alreadyMeasured – True if we've already measured this view once" />
      <item value="Creates a measure specification based on the supplied size and mode. The mode must always be one of the following: UNSPECIFIED EXACTLY AT_MOST Note: On API level 17 and lower, makeMeasureSpec's implementation was such that the order of arguments did not matter and overflow in either value could impact the resulting MeasureSpec. android.widget.RelativeLayout was affected by this bug. Apps targeting API levels greater than 17 will get the fixed, more strict behavior. Params: size – the size of the measure specification mode – the mode of the measure specification Returns: the measure specification based on size and mode" />
      <item value="Views that did not measure the maxSize has to be re-measured We will stop doing this once we introduce Gravity in the GLM layout params" />
      <item value="The background owner should be elevated so that it casts a shadow." />
      <item value="Specifies the elevation for this popup window. Params: elevation – the popup's elevation in pixels" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2985" />
        <entry key="ENGLISH" value="2986" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="BASQUE" value="1" />
        <entry key="RUSSIAN" value="6" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="13" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="2" />
        <entry key="LATIN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="ITALIAN" value="2" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1662365525245" />
  </component>
</application>