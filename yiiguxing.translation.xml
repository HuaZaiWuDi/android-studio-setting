<application>
  <component name="AppStorage">
    <histories>
      <item value="不允许绑定" />
      <item value="重新绑定" />
      <item value="已绑定" />
      <item value="binded" />
      <item value="unregister" />
      <item value="cloud" />
      <item value="cloudcloud" />
      <item value="生成" />
      <item value="UNSUPPORT" />
      <item value="transport" />
      <item value="传输" />
      <item value="PARAMETER" />
      <item value="参数" />
      <item value="PARAM" />
      <item value="本地" />
      <item value="LOCATION" />
      <item value="BLE" />
      <item value="REASON BLUETOOTH DISABLED" />
      <item value="the delay between each connection attempt, in milliseconds. The real delay will be 200 ms longer than specified, as {@link BluetoothGatt#clone()} is estimated to last {@link BleManagerHandler#internalConnect(BluetoothDevice, ConnectRequest) 200 ms}." />
      <item value="Sets an optional retry count and a delay that the process will wait before each connection attempt. The library will NOT retry if the device is not reachable, that is when the 30 sec. timeout occurs. In that case the app should scan before connecting, to make sure the target is in range." />
      <item value="Use to set a completion callback. The callback will be invoked when the operation has finished successfully unless {@link #await()} or its variant was used, in which case this callback will be ignored. &lt;p&gt; The done callback will also be called when one or more of initialization requests has failed due to a reason other than disconnect event. This is because {@link BleManagerCallbacks#onDeviceReady(BluetoothDevice)} is called no matter if the requests succeeded, or not. Set failure callbacks to initialization requests to get information about failures." />
      <item value="The {@link #done(SuccessCallback)} callback will be called after the device is ready, that is when it is connected, the services were discovered, the required services were found and the initialization queue set in {@link BleManager.BleManagerGattCallback#initialize()} is complete (without or with errors)." />
      <item value="The {@link #done(SuccessCallback)} callback will be called after the device is ready, that is * when it is connected, the services were discovered, the required services were found and the * initialization queue set in {@link BleManager.BleManagerGattCallback#initialize()} is complete * (without or with errors)." />
      <item value="The connect request is used to connect to a Bluetooth LE device. The request will end when * the device gets connected, the connection timeouts, or an error occurs." />
      <item value="invalid" />
      <item value="REASON DEVICE DISCONNECTED" />
      <item value="REASON DEVICE NOT SUPPORTED" />
      <item value="REASON NULL ATTRIBUTE" />
      <item value="REASON REQUEST FAILED" />
      <item value="REASON TIMEOUT" />
      <item value="REASON VALIDATION" />
      <item value="REASON CANCELLED" />
      <item value="The local device initiated disconnection." />
      <item value="The connection timed out. The device might have reboot, is out of range, turned off * or doesn't respond for another reason." />
      <item value="`true` if the element has been successfully removed; `false` if it was not present in the collection." />
      <item value="makes real freq boundaries" />
      <item value="Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function." />
      <item value="If the specified key is not already associated with a value (or is mapped * to {@code null}) associates it with the given value and returns * {@code null}, else returns the current value." />
      <item value="reverse" />
      <item value="Shared singleton connectivity thread for the system. This is a thread for * connectivity operations such as AsyncChannel connections to system services. * Various connectivity manager objects can use this singleton as a common * resource for their handlers instead of creating separate threads of their own." />
      <item value="to specify the thread upon which the callback will be invoked." />
      <item value="The {@link NetworkCallback} to be utilized for this request. Note the callback must not be shared - it uniquely specifies this request. The callback is invoked on the default internal Handler." />
      <item value="The {@link NetworkCallback} to be utilized for this request. Note * the callback must not be shared - it uniquely specifies this request. * The callback is invoked on the default internal Handler." />
      <item value="integration" />
      <item value="The facing of the camera is the same as that of the screen." />
      <item value="a new Camera object for the first back-facing camera, or null if there is no * backfacing camera" />
      <item value="Creates a new Camera object to access the first back-facing camera on the * device. If the device does not have a back-facing camera, this returns * null. Otherwise acts like the {@link #open(int)} call." />
      <item value="the hardware camera to access, between 0 and * {@link #getNumberOfCameras()}-1." />
      <item value="Creates a new Camera object to access a particular hardware camera. If * the same camera is opened by other applications, this will throw a * RuntimeException." />
      <item value="Connect to the camera service using #connectLegacy" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1497" />
        <entry key="ENGLISH" value="1498" />
        <entry key="FRENCH" value="1" />
        <entry key="KOREAN" value="92" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="JAPANESE" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>