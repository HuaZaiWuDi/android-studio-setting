<application>
  <component name="AppStorage">
    <histories>
      <item value="Location is illegal" />
      <item value="The color for the navigation bar. If the color is not opaque, consider setting {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}. For this to take effect, the window must be drawing the system bar backgrounds with {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not have been requested to be translucent with {@link android.R.attr#windowTranslucentNavigation}. Corresponds to {@link android.view.Window#setNavigationBarColor(int)}." />
      <item value="Flag indicating whether this window requests a translucent navigation bar. Corresponds to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}." />
      <item value="Flag indicating whether this window requests a translucent navigation bar." />
      <item value="For this to take effect, the window must be drawing the system bar backgrounds with {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not have been requested to be translucent with {@link android.R.attr#windowTranslucentNavigation}." />
      <item value="For this to take effect, the window must be drawing the system bar backgrounds with {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not have been requested to be translucent with" />
      <item value="The color for the navigation bar. If the color is not opaque, consider setting" />
      <item value="Shows a thin line of the specified color between the navigation bar and the app content." />
      <item value="resolve" />
      <item value="Indicates that the operation failed because the maximum outstanding * requests from the applications have reached." />
      <item value="Indicates that the operation failed due to an internal error." />
      <item value="Indicates that the operation failed because it is already active." />
      <item value="a {@link ConnectableObservable} that upon connection causes the source ObservableSource to emit its * items to its {@link Observer}s" />
      <item value="Returns a {@link ConnectableObservable} that shares a single subscription to the underlying ObservableSource * that will replay all of its items and notifications to any future {@link Observer}. A Connectable * ObservableSource resembles an ordinary ObservableSource, except that it does not begin emitting items when it is * subscribed to, but only when its {@code connect} method is called." />
      <item value="Returns a reversed read-only view of the original List. * All changes made in the original list will be reflected in the reversed one." />
      <item value="Returns a list with elements in reversed order." />
      <item value="Copies all of the elements from one list into another. After the * operation, the index of each copied element in the destination list * will be identical to its index in the source list. The destination * list must be at least as long as the source list. If it is longer, the * remaining elements in the destination list are unaffected. &lt;p&gt;" />
      <item value="Constructs a list containing the elements of the specified * collection, in the order they are returned by the collection's * iterator." />
      <item value="aggregate" />
      <item value="Perform the transaction action after onSaveInstanceState." />
      <item value="This is dangerous because the action can * be lost if the activity needs to later be restored from its state." />
      <item value="Delayed action must not be selected as the last action." />
      <item value="Delays cannot be continuous" />
      <item value="Favorite" />
      <item value="shortcut" />
      <item value="Delivery" />
      <item value="This position is deleted or do not have permission for this operation" />
      <item value="Supertypes of the following classes cannot be resolved. Please make sure you have the required dependencies in the classpath:" />
      <item value="Curtain" />
      <item value="Returns {@code true} if the FragmentManager's state has already been saved * by its host. Any operations that would change saved state should not be performed * if this method returns true. For example, any popBackStack() method, such as * {@link #popBackStackImmediate()} or any FragmentTransaction using * {@link FragmentTransaction#commit()} instead of * {@link FragmentTransaction#commitAllowingStateLoss()} will change * the state and will result in an error." />
      <item value="Perform" />
      <item value="If you don't want to lost the action:" />
      <item value="Perform the transaction action after onSaveInstanceState. * &lt;p&gt; * This is dangerous because the action can * be lost if the activity needs to later be restored from its state. * &lt;p&gt; * &lt;p&gt;" />
      <item value="Warning: Perform this popTo() action after onSaveInstanceState!" />
      <item value="在myguard 返回提示Tips中增加空格" />
      <item value="Virtual" />
      <item value="loading more or manual refresh" />
      <item value="CORRESPONDING" />
      <item value="Function of current event -&gt; target disposal event. ViewModel has a very simple lifecycle. * It is created and then later on cleared. So we only have two events and all subscriptions * will only be disposed at [ViewModelEvent.CLEARED]." />
      <item value="and access prior to that will result in IllegalArgumentException." />
      <item value="Returns a property delegate for a read/write property with a non-`null` value that is initialized not during * object construction time but at a later time. Trying to read the property before the initial value has been * assigned results in an exception." />
      <item value="Wrapper around layoutChildren() that handles animating changes caused by layout. * Animations work on the assumption that there are five different kinds of items * in play: * PERSISTENT: items are visible before and after layout * REMOVED: items were visible before layout and were removed by the app * ADDED: items did not exist before layout and were added by the app * DISAPPEARING: items exist in the data set before/after, but changed from * visible to non-visible in the process of layout (they were moved off * screen as a side-effect of other changes) * APPEARING: items exist in the data set before/after, but changed from * non-visible to visible in the process of layout (they were moved on * screen as a side-effect of other changes) * The overall approach figures out what items exist before/after layout and * infers one of the five above states for each of the items. Then the animations * are set up accordingly: * PERSISTENT views are animated via * {@link ItemAnimator#animatePersistence(ViewHolder, ItemHolderInfo, ItemHolderInfo)} * DISAPPEARING views are animated via * {@link ItemAnimator#animateDisappearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)} * APPEARING views are animated via * {@link ItemAnimator#animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)} * and changed views are animated via * {@link ItemAnimator#animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)}." />
      <item value="dispatch" />
      <item value="설정한 요일/시간에만 실행됩니다." />
      <item value="category" />
      <item value="provides check for verifying if this element represents a null value or not." />
      <item value="Signals success with 0L value after the given delay for each SingleObserver." />
      <item value="Scenario" />
      <item value="sealed" />
      <item value="assign" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="288" />
        <entry key="ENGLISH" value="289" />
        <entry key="KOREAN" value="92" />
        <entry key="JAPANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>