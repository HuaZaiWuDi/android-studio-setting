<application>
  <component name="AppStorage">
    <histories>
      <item value="Flag indicating that if the described PendingIntent already exists, * then keep it but replace its extra data with what is in this new * Intent. For use with {@link #getActivity}, {@link #getBroadcast}, and * {@link #getService}. &lt;p&gt;This can be used if you are creating intents where only the * extras change, and don't care that any entities that received your * previous PendingIntent will be able to launch it with your new * extras even if they are not explicitly given to it." />
      <item value="The intent to execute when the expanded status entry is clicked. If * this is an activity, it must include the" />
      <item value="The intent to execute when the expanded status entry is clicked. If * this is an activity, it must include the * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK} flag, which requires * that you take care of task management as described in the * &lt;a href=&quot;{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html&quot;&gt;Tasks and Back * Stack&lt;/a&gt; document. In particular, make sure to read the notification section * &lt;a href=&quot;{@docRoot}guide/topics/ui/notifiers/notifications.html#HandlingNotifications&quot;&gt;Handling * Notifications&lt;/a&gt; for the correct ways to launch an application from a * notification." />
      <item value="Retrieve a PendingIntent that will start a service, like calling * {@link Context#startService Context.startService()}. The start * arguments given to the service will come from the extras of the Intent." />
      <item value="&lt;p class=&quot;note&quot;&gt;For security reasons, the {@link android.content.Intent} * you supply here should almost always be an &lt;em&gt;explicit intent&lt;/em&gt;, * that is specify an explicit component to be delivered to through * {@link Intent#setClass(android.content.Context, Class) Intent.setClass}&lt;/p&gt;" />
      <item value="Intent#fillIn Intent.fillIn()} to control which unspecified parts * of the intent that can be supplied when the actual send happens." />
      <item value="Returns an existing or new PendingIntent matching the given * parameters. May return null only if {@link #FLAG_NO_CREATE} has been * supplied." />
      <item value="Flag indicating that the created PendingIntent should be immutable. * This means that the additional intent argument passed to the send * methods to fill in unpopulated properties of this intent will be * ignored." />
      <item value="IMMUTABLE" />
      <item value="CURRENT" />
      <item value="Flag indicating that this PendingIntent can be used only once. * For use with {@link #getActivity}, {@link #getBroadcast}, and * {@link #getService}. &lt;p&gt;If set, after * {@link #send()} is called on it, it will be automatically * canceled for you and any future attempt to send through it will fail." />
      <item value="A path to a file that contains compressed bitmap data of * a type that {@link android.graphics.BitmapFactory} can decode." />
      <item value="Decode a file path into a bitmap. If the specified file name is null, * or cannot be decoded into a bitmap, the function returns null." />
      <item value="EXTRA MESSAGE" />
      <item value="delivery" />
      <item value="* Retrieve a PendingIntent that will start a service, like calling * {@link Context#startService Context.startService()}. The start * arguments given to the service will come from the extras of the Intent." />
      <item value="Flag indicating that if the described PendingIntent does not * already exist, then simply return null instead of creating it. * For use with {@link #getActivity}, {@link #getBroadcast}, and * {@link #getService}." />
      <item value="A string identifier for this notification. May be {@code null}." />
      <item value="the channel to create. Note that the created channel may differ from this * value. If the provided channel is malformed, a RemoteException will be * thrown." />
      <item value="Creates multiple notification channels that different notifications can be posted to. See * {@link #createNotificationChannel(NotificationChannel)}." />
      <item value="This can also be used to restore a deleted channel and to update an existing channel's * name, description, group, and/or importance." />
      <item value="Creates a notification channel that notifications can be posted to." />
      <item value="Supply a {@link PendingIntent} to be sent when the notification is clicked." />
      <item value="Bit to be bitwise-ored into the {@link #flags} field that should be * set if the notification should not be canceled when the user clicks * the Clear all button." />
      <item value="Bit to be bitwise-ored into the {@link #flags} field that should be * set if the notification should be canceled when it is clicked by the * user." />
      <item value="channel" />
      <item value="ACTION Click" />
      <item value="Activity Action: Delete the given data from its container." />
      <item value="A composable that places its children in a horizontal sequence, assigning children widths * according to their flex weights." />
      <item value="A composable that places its children in a vertical flow. Unlike [Column] or [FlexColumn], if the * vertical space is too small to put all the children in one column, multiple columns may be used." />
      <item value="An Effect used to get the value of an ambient at a specific position during composition." />
      <item value="An Effect that positionally memoizes the result of a computation." />
      <item value="None of the following functions can be called with the arguments supplied:" />
      <item value="After successful service discovery the service will initialize all services. * The {@link #onDeviceReady(BluetoothDevice)} method will be called when the initialization * is complete." />
      <item value="if &lt;code&gt;true&lt;/code&gt; the secondary services were also found * on the device." />
      <item value="GATT CONN TERMINATE LOCAL HOST" />
      <item value="thread is not runnable for too long time, need to remove" />
      <item value="Called each time the task queue gets cleared." />
      <item value="Set the 'operation in progress' flag, so any request made in onDeviceReady() // will not start new nextRequest() call." />
      <item value="after {@link BleManagerCallbacks#onDeviceReady(BluetoothDevice)} has been * called." />
      <item value="This method returns a {@link ConnectRequest} which can be used to set completion * and failure callbacks. The completion callback (done) will be called after the initialization * is complete, after {@link BleManagerCallbacks#onDeviceReady(BluetoothDevice)} has been * called." />
      <item value="is called in notifyDeviceDisconnected, which may enqueue new requests. // Setting this flag to false would allow to enqueue a new request before the // current one ends processing. The following line should not be uncommented." />
      <item value="Executes the next request. If the last element from the initialization queue has * been executed the {@link #onDeviceReady()} callback is called." />
      <item value="Callback indicating the connection parameters were updated. Works on Android 8+." />
      <item value="This method is called from the main thread when the services has been discovered and * the device is supported (has required service)." />
      <item value="This method should set up the request queue needed to initialize the profile. * Enabling Service Change indications for bonded devices is handled before executing this * queue. The queue may have requests that are not available, e.g. read an optional * service when it is not supported by the connected device. Such call will trigger * {@link Request#fail(FailCallback)}." />
      <item value="Chain of Causes for CompositeException In Order Received" />
      <item value="State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}, set when a view or its parent has been &quot;activated&quot; meaning the user has currently marked it as being of interest. This is an alternative representation of state_checked for when the state should be propagated down the view hierarchy." />
      <item value="State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}, set when a view or drawable is in the last position in an ordered set. Actual usage may vary between views. Consult the host view documentation for details." />
      <item value="The specified child already has a parent. You must call removeView() on the child's parent first." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="97" />
        <entry key="ENGLISH" value="98" />
        <entry key="JAPANESE" value="1" />
      </map>
    </option>
  </component>
</application>