<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="全局" />
      <item value="无权限" />
      <item value="wu" />
      <item value="is Delete Or Un Permission" />
      <item value="Window flag: intended for windows that will often be used when the user is holding the screen against their face, it will aggressively filter the event stream to prevent unintended presses in this situation that may not be desired for a particular window, when such an event stream is detected, the application will receive a CANCEL motion event to indicate this so applications can handle this accordingly by taking no action on the event until the finger is released." />
      <item value="Cheek" />
      <item value="Press" />
      <item value="Ignore Cheek Press" />
      <item value="Set the flag on popup to ignore cheek press events; by default this flag is set to false which means the popup will not ignore cheek press dispatch events. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods." />
      <item value="Set whether this window is touch modal or if outside touches will be sent to other windows behind it. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods. Params: touchModal – true to sent all outside touches to this window, false to other windows behind it" />
      <item value="Indicates whether outside touches will be sent to this window or other windows behind it" />
      <item value="This will attach the popup window to the decor frame of the parent window to avoid overlaping with screen decorations like the navigation bar. Overrides the default behavior of the flag WindowManager.LayoutParams.FLAG_LAYOUT_ATTACHED_IN_DECOR." />
      <item value="enabled – true if the split touches should be enabled, false otherwise" />
      <item value="Allows the popup window to split touches across other windows that also support split touch. When this flag is false, the first pointer that goes down determines the window to which all subsequent touches go until all pointers go up. When this flag is true, each pointer (not necessarily the first) that goes down determines the window to which all subsequent touches of that pointer will go until that pointer goes up thereby enabling touches with multiple pointers to be split across multiple windows." />
      <item value="Allow PopupWindow to scroll the anchor's parent to provide more room for the popup. Enabled by default." />
      <item value="Indicates whether clipping of the popup window is enabled. Returns: true if the clipping is enabled, false otherwise" />
      <item value="touchModal – true to sent all outside touches to this window, false to other windows behind it" />
      <item value="Indicates whether the popup window supports splitting touches. Returns: true if the touch splitting is enabled, false otherwise" />
      <item value="Set whether this window is touch modal or if outside touches will be sent to other windows behind it." />
      <item value="Indicates whether the popup window will be forced into using absolute screen coordinates for positioning." />
      <item value="ndicates whether the popup is showing above (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view (the y coordinate of the popup is greater than y coordinate of the anchor's bottom). The value returned by this method is meaningful only after showAsDropDown(View) or showAsDropDown(View, int, int) was invoked." />
      <item value="Mode for setInputMethodMode(int): this popup always needs to work with an input method, regardless of whether it is focusable. This means that it will always be displayed so that the user can also operate the input method while it is shown." />
      <item value="Control how the popup operates with an input method: one of INPUT_METHOD_FROM_FOCUSABLE, INPUT_METHOD_NEEDED, or INPUT_METHOD_NOT_NEEDED." />
      <item value="overlapAnchor – Whether the popup should overlap its anchor." />
      <item value="Sets whether the popup window should overlap its anchor view when displayed as a drop-down. If the popup is showing, calling this method will take effect only the next time the popup is shown." />
      <item value="Sets whether the popup window should overlap its anchor view when displayed as a drop-down. Params: overlapAnchor – Whether the popup should overlap its anchor." />
      <item value="orientation" />
      <item value="Sites" />
      <item value="has no zero argument constructor" />
      <item value="Enforcer" />
      <item value="m Fragment Max Lifecycle Enforcer" />
      <item value="Caused by: java.lang.IllegalStateException: Room cannot verify the data integrity. Looks like you've changed schema but forgot to update the version number. You can simply fix this by increasing the version number." />
      <item value="true to prevent Target.onLoadFailed(Drawable) from being called on target, typically because the listener wants to update the target or the object the target wraps itself or false to allow Target.onLoadFailed(Drawable) to be called on target." />
      <item value="功率" />
      <item value="电量" />
      <item value="点了" />
      <item value="默认" />
      <item value="Weather" />
      <item value="后一个" />
      <item value="hou" />
      <item value="bitLength – length of the new BigInteger in bits." />
      <item value="Returns a random positive BigInteger instance in the range [0, pow(2, bitLength)-1] which is probably prime. The probability that the returned BigInteger is prime is greater than 1 - 12&lt;sup&gt;100&lt;sup&gt;)." />
      <item value="Overall orientation of the screen. May be one of ORIENTATION_LANDSCAPE, ORIENTATION_PORTRAIT." />
      <item value="index – The index of the layer to modify, must be in the range 0...getNumberOfLayers()-1. id – The id to assign to the layer." />
      <item value="Notified when a context click occurs. Params: e – The motion event that occurred during the context click. Returns: true if the event is consumed, else false" />
      <item value="Sets the listener which will be called for context clicks. Params: onContextClickListener – the listener invoked for all the callbacks, or null to stop listening for context clicks." />
      <item value="Set whether longpress is enabled, if this is enabled when a user presses and holds down you get a longpress event and nothing further. If it's disabled the user can press and hold down and then later moved their finger and you will get scroll events. By default longpress is enabled. Params: isLongpressEnabled – whether longpress should be enabled." />
      <item value="ALARMING" />
      <item value="compulsory" />
      <item value="dispatch" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1904" />
        <entry key="ENGLISH" value="1905" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="RUSSIAN" value="4" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="11" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1652237191860" />
  </component>
</application>