<application>
  <component name="AppStorage">
    <histories>
      <item value="어제" />
      <item value="시간" />
      <item value="저장" />
      <item value="Gets the transformation to apply at a specified point in time. Implementations of this * method should always replace the specified Transformation or document they are doing * otherwise." />
      <item value="restrict" />
      <item value="Ensure that the duration that this animation will run is not longer * than &lt;var&gt;durationMillis&lt;/var&gt;. In addition to adjusting the duration * itself, this ensures that the repeat count also will not make it run * longer than the given time." />
      <item value="If fillEnabled is true, the animation will apply the value of fillBefore. * Otherwise, fillBefore is ignored and the animation * transformation is always applied until the animation ends." />
      <item value="true if the animation should take the value of fillBefore into account" />
      <item value="true if the animation will take fillBefore into account" />
      <item value="If fillEnabled is true, this animation will apply the value of fillBefore." />
      <item value="Indicates whether the animation transformation should be applied after the * animation ends." />
      <item value="If this animation is run as a window animation, this will make the wallpaper visible behind * the animation." />
      <item value="true if the animation should apply its transformation after it ends" />
      <item value="If fillBefore is true, this animation will apply its transformation * before the start time of the animation. Defaults to true if * {@link #setFillEnabled(boolean)} is not set to true. * Note that this applies when using an {@link * android.view.animation.AnimationSet AnimationSet} to chain * animations. The transformation is not applied before the AnimationSet * itself starts." />
      <item value="Convenience method to start the animation the first time * {@link #getTransformation(long, Transformation)} is invoked." />
      <item value="If you cancel an animation manually, you must call {@link #reset()} * before starting the animation again." />
      <item value="Cancel the animation. Cancelling an animation invokes the animation * listener, if set, to notify the end of the animation." />
      <item value="Defines what this animation should do when it reaches the end. This * setting is applied only when the repeat count is either greater than * 0 or {@link #INFINITE}. Defaults to {@link #RESTART}." />
      <item value="When the animation reaches the end and the repeat count is INFINTE_REPEAT * or a positive value, the animation restarts from the beginning." />
      <item value="If fillBefore is true, this animation will apply its transformation * before the start time of the animation. If fillBefore is false and * {@link #isFillEnabled() fillEnabled} is true, the transformation will not be applied until * the start time of the animation." />
      <item value="true if the animation has ended, false otherwise" />
      <item value="The X coordinate of the point about which the object * is being rotated, specified as an absolute number where 0 is the * left edge. This value can either be an absolute number if * pivotXType is ABSOLUTE, or a percentage (where 1.0 is 100%) * otherwise." />
      <item value="ABSOLUTE" />
      <item value="Specifies how pivotXValue should be interpreted. One of * Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or * Animation.RELATIVE_TO_PARENT." />
      <item value="The X coordinate of the point about which the object is * being rotated, specified as an absolute number where 0 is the left * edge." />
      <item value="Repeat the animation indefinitely." />
      <item value="INFINITE" />
      <item value="specified as an absolute number where 0 is the top * edge." />
      <item value="unescaped apostrophe in string" />
      <item value="Flags for {@link #fromHtml(String, int, ImageGetter, TagHandler)}: Separate block-level * elements with line breaks (single newline character) in between. This inverts the * {@link Spanned} to HTML string conversion done with the option * {@link #TO_HTML_PARAGRAPH_LINES_INDIVIDUAL}." />
      <item value="Flags for {@link #fromHtml(String, int, ImageGetter, TagHandler)}: Separate block-level * elements with blank lines (two newline characters) in between. This is the legacy behavior * prior to N." />
      <item value="Flag indicating that texts inside &amp;lt;h1&amp;gt;~&amp;lt;h6&amp;gt; elements will be separated from * other texts with one newline character by default. */" />
      <item value="Flag indicating that texts inside &amp;lt;p&amp;gt; elements will be separated from other texts with * one newline character by default. */" />
      <item value="Flag indicating that texts inside &amp;lt;ul&amp;gt; elements will be separated from other texts * with one newline character by default." />
      <item value="Called when the Activity calls {@link Activity#onCreate super.onCreate()}." />
      <item value="Called as the first step of the Activity being created. This is always called before * {@link Activity#onCreate}." />
      <item value="Returns true if the activity's orientation is fixed to landscape." />
      <item value="PORTRAIT" />
      <item value="behind" />
      <item value="Constant corresponding to &lt;code&gt;behind&lt;/code&gt; in * the {@link android.R.attr#screenOrientation} attribute." />
      <item value="Returns the timing interpolator that this animation uses." />
      <item value="curtain" />
      <item value="atmospheric" />
      <item value="curved" />
      <item value="Have" />
      <item value="The notification starts the callback and loads more" />
      <item value="Returns the Adapter position of the item represented by this ViewHolder." />
      <item value="Compilation failed to complete" />
      <item value="is defined multiple times" />
      <item value="URL fire insurance detail" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="431" />
        <entry key="ENGLISH" value="432" />
        <entry key="FRENCH" value="4" />
        <entry key="KOREAN" value="4" />
        <entry key="CATALAN" value="1" />
        <entry key="ZULU" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>