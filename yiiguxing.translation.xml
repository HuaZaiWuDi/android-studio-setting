<application>
  <component name="AppStorage">
    <histories>
      <item value="available" />
      <item value="Distance in pixels a touch can wander before we think the user is scrolling" />
      <item value="This is called when the user has started touching this widget." />
      <item value="Whether the device, that was connected using auto connect, has disconnected." />
      <item value="Unresolved reference: BleGattCallback" />
      <item value="Return true if the fragment has been supportVisible." />
      <item value="ued" />
      <item value="the function that is called with a Flowable that signals a value when the Single      *                signalled a success value and returns a Publisher that has to signal a value to      *                trigger a resubscription to the current Single, otherwise the terminal signal of      *                the Publisher will be the terminal signal of the sequence as well." />
      <item value="the function that is called with a Flowable that signals a value when the Single * signalled a success value and returns a Publisher that has to signal a value to * trigger a resubscription to the current Single, otherwise the terminal signal of * the Publisher will be the terminal signal of the sequence as well." />
      <item value="does not operate by default on a particular {@link Scheduler}.&lt;/dd&gt;" />
      <item value="honors the backpressure of the downstream consumer." />
      <item value="Re-subscribes to the current Single if * the Publisher returned by the handler function signals a value in response to a * value signalled through the Flowable the handle receives." />
      <item value="ordinal" />
      <item value="Requests new MTU. On Android Lollipop or newer it will send the MTU request to the connected * device. On older versions of Android the * {@link MtuCallback#onMtuChanged(BluetoothDevice, int)} set with * {@link MtuRequest#with(MtuCallback)} will be called with current MTU value. * &lt;p&gt; * The returned request must be either enqueued using {@link Request#enqueue()} for * asynchronous use, or awaited using await() in synchronous execution." />
      <item value="unresolved reference. None of the following candidates is applicable because of receiver type mismatch:" />
      <item value="Retrieves, but does not remove, the first element of this deque, * or returns {@code null} if this deque is empty." />
      <item value="offer" />
      <item value="Retrieves and removes the first element of this deque, * or returns {@code null} if this deque is empty." />
      <item value="Pushes an element onto the stack represented by this deque (in other * words, at the head of this deque) if it is possible to do so * immediately without violating capacity restrictions, throwing an * {@code IllegalStateException} if no space is currently available." />
      <item value="initialize your data structure here." />
      <item value="Check your module classpath for missing or conflicting dependencies" />
      <item value="External" />
      <item value="cannot find symbol" />
      <item value="for-each not applicable to expression type" />
      <item value="peek" />
      <item value="得分" />
      <item value="Enable or disable pan gesture detection. Disabling pan causes the image to be centered. Pan * can still be changed from code." />
      <item value="State change originated from a double tap zoom anim." />
      <item value="State change originated from animation." />
      <item value="Scale the image so that both dimensions of the image will be equal to or larger than the corresponding dimension of the view. The top left is shown." />
      <item value="Scale the image so that both dimensions of the image will be equal to or less than the maxScale and equal to or larger than minScale. The image is then centered in the view." />
      <item value="Scale the image uniformly so that both dimensions of the image will be equal to or larger than the corresponding dimension of the view. The image is then centered in the view." />
      <item value="Scale the image so that both dimensions of the image will be equal to or less than the corresponding dimension of the view. The image is then centered in the view. This is the default behaviour and best for galleries." />
      <item value="Allows the image to be panned until a corner reaches the center of the screen but no further. Useful when you want to pan any spot on the image to the exact center of the screen." />
      <item value="Don't allow the image to be panned off screen. As much of the image as possible is always displayed, centered in the view when it is smaller. This is the best option for galleries." />
      <item value="Allows the image to be panned until it is just off screen, but no further. The edge of the image will stop when it is flush with the screen edge. */ public static final int PAN_LIMIT_OUTSIDE = 2;" />
      <item value="Quadratic ease out. Not recommended for scale animation, but good for panning. */" />
      <item value="Zoom in to and center the tapped point immediately without animating. */" />
      <item value="During zoom animation, keep the point of the image that was tapped in the same place, and scale the image around it. */" />
      <item value="CROP" />
      <item value="INSIDE" />
      <item value="Source image pixel density at minimum zoom." />
      <item value="This is a screen density aware alternative to {@link #setMinScale(float)}; it allows you to express the minimum * allowed scale in terms of the maximum pixel density." />
      <item value="Externally change the scale and translation of the source image. This may be used with getCenter() and getScale() * to restore the scale and zoom after a screen rotate." />
      <item value="Enable tiling of the image. This does not apply to preview images which are always loaded as a single bitmap., * and tiling cannot be disabled when displaying a region of the source image." />
      <item value="Enable or disable tiling of the image. This does not apply to preview images which are always loaded as a single bitmap, * and tiling cannot be disabled when displaying a region of the source image." />
      <item value="tiling" />
      <item value="Use a region of the source image. Region must be set independently for the full size image and the preview if * you are using one." />
      <item value="Declare the dimensions of the image. This is only required for a full size image, when you are specifying a URI * and also a preview image. When displaying a bitmap object, or not using a preview, you do not need to declare * the image dimensions. Note if the declared dimensions are found to be incorrect, the view will reset." />
      <item value="Provide a loaded and cached bitmap for display. This bitmap will not be recycled when it is no * longer needed. Use this method if you loaded the bitmap with an image loader such as Picasso * or Volley." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="744" />
        <entry key="ENGLISH" value="745" />
        <entry key="FRENCH" value="1" />
        <entry key="KOREAN" value="92" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="JAPANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>