<application>
  <component name="AppStorage">
    <histories>
      <item value="Retains only elements of this [MutableCollection] that are contained in the given [elements] collection." />
      <item value="subtract" />
      <item value="Returns a set containing all elements that are contained by both this collection and the specified collection." />
      <item value="intersect" />
      <item value="Reduce" />
      <item value="Returns a list containing successive accumulation values generated by applying [operation] from left to right * to each element and current accumulator value that starts with [initial] value." />
      <item value="scan" />
      <item value="reduce" />
      <item value="fold Indexed" />
      <item value="union" />
      <item value="period" />
      <item value="the action called when this Flowable terminates or gets canceled" />
      <item value="In case of a race between a terminal event and a cancellation, the provided {@code onFinally} action * is executed once per subscription." />
      <item value="Calls the specified action after this Flowable signals onError or onCompleted or gets canceled by * the downstream." />
      <item value="Modifies the source Publisher so that it invokes an action when it calls {@code onComplete}." />
      <item value="Either 0 or {@link #POP_BACK_STACK_INCLUSIVE}." />
      <item value="POP BACK STACK INCLUSIVE" />
      <item value="REASON NULL ATTRIBUTE" />
      <item value="Requested element count -3 is less than zero." />
      <item value="It is useful when ViewModel observes some data and you need to clear this subscription to * prevent a leak of this ViewModel." />
      <item value="This method will be called when this ViewModel is no longer used and will be destroyed." />
      <item value="Since clear() is final, this method is still called on mock objects // and in those cases, mBagOfTags is null. It'll always be empty though // because setTagIfAbsent and getTag are not final so we can skip // clearing it" />
      <item value="Emit the [ViewModelEvent.CLEARED] event to * dispose off any subscriptions in the ViewModel." />
      <item value="MulticastLock under-locked com.github.druk.dnssd.DNSSD" />
      <item value="The exception could not be delivered to the consumer because it has already canceled/disposed the flow or the exception has nowhere to go to begin with." />
      <item value="contorl" />
      <item value="Returns a Flowable that emits buffers of items it collects from the source Publisher. The resulting * Publisher emits connected, non-overlapping buffers, each of a fixed duration specified by the * {@code timespan} argument. When the source Publisher completes, the resulting Publisher emits the current buffer * and propagates the notification from the source Publisher. Note that if the source Publisher issues an onError * notification the event is passed on immediately without first emitting the buffer it is in the process of * assembling." />
      <item value="giving up android.os.TransactionTooLargeException: data parcel size 534876 bytes" />
      <item value="Binds the current process to {@code network}. All Sockets created in the future * (and not explicitly bound via a bound SocketFactory from" />
      <item value="Use {@link BaseInputConnection#removeComposingSpans * BaseInputConnection.removeComposingSpans()} to remove any IME composing * state from this text view." />
      <item value="Composing" />
      <item value="you can call GOI_get_model_define(string model) to get the define of each property." />
      <item value="Annotation isn't stored in binary output" />
      <item value="regiser" />
      <item value="Low-level logging call." />
      <item value="RADIO" />
      <item value="write" />
      <item value="The remote device initiated graceful disconnection." />
      <item value="The local device initiated disconnection." />
      <item value="REASON LINK LOSS" />
      <item value="Adds the given observer to the observers list within the lifespan of the given * owner. The events are dispatched on the main thread. If LiveData already has data * set, it will be delivered to the observer." />
      <item value="ensure" />
      <item value="Return the handle to a system-level service by name. The class of the * returned object varies by the requested name. Currently available names * are:" />
      <item value="throw exception instead and enforce 1:1 mapping of callbacks" />
      <item value="The time in milliseconds to attempt looking for a suitable network * before {@link NetworkCallback#onUnavailable()} is called. The timeout must * be a positive value (i.e. &gt;0)." />
      <item value="Removes (if found) the given transport from this builder instance." />
      <item value="if the operation succeeded, i.e., the scan was initiated." />
      <item value="The ability for apps to trigger scan requests will be removed in a future * release." />
      <item value="he ability for apps to trigger scan requests will be removed in a future * release." />
      <item value="in order to get valid results." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1373" />
        <entry key="ENGLISH" value="1374" />
        <entry key="FRENCH" value="1" />
        <entry key="KOREAN" value="92" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>