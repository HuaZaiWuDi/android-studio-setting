<application>
  <component name="AppStorage">
    <histories>
      <item value="Extracts the phone number from an Intent." />
      <item value="Returns the phone number string for line 1, for example, the MSISDN * for a GSM phone. Return null if it is unavailable." />
      <item value="Denied" />
      <item value="cannot be activated due to disconnected network." />
      <item value="Returns a Single that emits the single item emitted by the source Publisher, if that Publisher * emits only a single item, or a default item if the source Publisher emits no items. If the source * Publisher emits more than one item, an {@code IllegalArgumentException} is signaled instead." />
      <item value="when setData is called, we set the pending data and actual data swap happens on the main" />
      <item value="Mutable" />
      <item value="Note that only one observer is going to be notified of changes." />
      <item value="This avoids a common problem with events: on configuration change (like rotation) an update * can be emitted if the observer is active. This LiveData only calls the observable if there's an * explicit call to setValue() or call()." />
      <item value="A lifecycle-aware observable that sends only new updates after subscription, used for events like * navigation and Snackbar messages." />
      <item value="Nulls out references to the upstream producer and downstream SingleObserver if * the sequence is terminated or downstream calls dispose()." />
      <item value="Detach" />
      <item value="Terminate" />
      <item value="ATTR CAMERA MDRIGGER detect" />
      <item value="Unit defined in com.lumi.commonui.cell.CommonCell" />
      <item value="forever" />
      <item value="Optimze" />
      <item value="Returns `true` if this char sequence is empty (contains no characters)." />
      <item value="Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters." />
      <item value="none" />
      <item value="Returns `true` if no elements match the given [predicate]." />
      <item value="IFTTT My Guard Action Bean" />
      <item value="Gets the current value of the default locale for this instance * of the Java Virtual Machine." />
      <item value="KOREAN" />
      <item value="All security devices of CCTV G2 have been deleted so that Myguard cannot be activated." />
      <item value="Instantiation" />
      <item value="多选" />
      <item value="单选" />
      <item value="Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index. * The returned list has length of the shortest collection." />
      <item value="postfix" />
      <item value="prefix" />
      <item value="separator" />
      <item value="Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied." />
      <item value="week Day" />
      <item value="motion" />
      <item value="The string constructed by replacing each matching subsequence * by the replacement string, substituting captured subsequences * as needed" />
      <item value="The replacement string" />
      <item value="A literal string replacement" />
      <item value="&lt;p&gt;This method produces a &lt;code&gt;String&lt;/code&gt; that can be used to * create a &lt;code&gt;Pattern&lt;/code&gt; that would match the string * &lt;code&gt;s&lt;/code&gt; as if it were a literal pattern.&lt;/p&gt; Metacharacters * or escape sequences in the input sequence will be given no special * meaning." />
      <item value="Returns a literal pattern &lt;code&gt;String&lt;/code&gt; for the specified * &lt;code&gt;String&lt;/code&gt;." />
      <item value="quote" />
      <item value="Splits the given input sequence around matches of this pattern." />
      <item value="The (possibly empty) subsequence matched by the previous match, * in string form" />
      <item value="Returns the input subsequence matched by the previous match." />
      <item value="fastpath will work if the regex is a * (1)one-char String and this character is not one of the * RegEx's meta characters &quot;.$|()[{^?*+\\&quot;, or * (2)two-char String and the first char is the backslash and * the second is one of regEx's meta characters &quot;.$|()[{^?*+\\&quot;." />
      <item value="Returns a result equivalent to {@code s.split(separator, limit)} if it's able * to compute it more cheaply than native impl, or null if the caller should fall back to * using native impl." />
      <item value="wheel curved" />
      <item value="atmospheric" />
      <item value="Pads the string to the specified [length] at the beginning with the specified character or space." />
      <item value="Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="352" />
        <entry key="ENGLISH" value="353" />
        <entry key="FRENCH" value="4" />
        <entry key="CATALAN" value="1" />
        <entry key="ZULU" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>