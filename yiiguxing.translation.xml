<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="device Info Ready" />
      <item value="Returns the position in the group of the specified child view. Params: child – the view for which to get the position Returns: a positive integer representing the position of the view in the group, or -1 if the view does not exist in the group" />
      <item value="Used to indicate that the parent of this view should be invalidated. This functionality is used to force the parent to rebuild its display list (when hardware-accelerated), which is necessary when various parent-managed properties of the view change, such as alpha, translationXY, scrollXY, scaleXY, and rotationXY. This method will propagate an invalidation event to the parent." />
      <item value="Used to indicate that the parent of this view should clear its caches. This functionality is used to force the parent to rebuild its display list (when hardware-accelerated), which is necessary when various parent-managed properties of the view change, such as alpha, translationXY, scrollXY, scaleXY, and rotationXY. This method only clears the parent caches and does not causes an invalidate event." />
      <item value="Returns a subsequence of this char sequence containing the first characters that satisfy the given predicate." />
      <item value="is Digit" />
      <item value="Returns true if this character is a letter or digit." />
      <item value="Returns true if this character is a letter." />
      <item value="is Letter" />
      <item value="This method is called to notify you that, somewhere within s, the text has been changed. It is legitimate to make further changes to s from this callback, but be careful not to get yourself into an infinite loop, because any changes you make will cause this method to be called again recursively. (You are not told where the change took place because other afterTextChanged() methods may already have made other changes and invalidated the offsets. But if you need to know here, you can use Spannable.setSpan in onTextChanged to mark your place and then look up from here where the span ended up." />
      <item value="This method is called to notify you that, within s, the count characters beginning at start have just replaced old text that had length before. It is an error to attempt to make changes to s from this callback." />
      <item value="his method is called to notify you that, within s, the count characters beginning at start have just replaced old text that had length before. It is an error to attempt to make changes to s from this callback." />
      <item value="This method is called to notify you that, within s, the count characters beginning at start are about to be replaced by new text with length after. It is an error to attempt to make changes to s from this callback." />
      <item value="When an object of this type is attached to an Editable, its methods will be called when the text is changed." />
      <item value="Add an action which will be invoked before the text changed" />
      <item value="intentionally empty, template pattern method can be overridden by subclasses" />
      <item value="marquee" />
      <item value="Returns the view at the specified position in the group. Params: index – the position at which to get the view from Returns: the view at the specified position or null if the position does not exist within the group" />
      <item value="This may be within the padding region." />
      <item value="Specify a bounding rectangle for the Drawable. This is where the drawable will draw when its draw() method is called." />
      <item value="bitmap – The bitmap to be drawn left – The position of the left side of the bitmap being drawn top – The position of the top side of the bitmap being drawn paint – The paint used to draw the bitmap (may be null)" />
      <item value="On touch, this offset plus the scaled value from the position of the touch will form the progress value. Usually 0." />
      <item value="bitmap – The bitmap to be drawn src – May be null. The subset of the bitmap to be drawn dst – The rectangle that the bitmap will be scaledtranslated to fit into paint – May be null. The paint used to draw the bitmap" />
      <item value="The rectangle that the bitmap will be scaledtranslated to fit int" />
      <item value="May be null. The subset of the bitmap to be drawn" />
      <item value="气泡" />
      <item value="Updates the position and the dimension of the popup window." />
      <item value="Updates the state of the popup window, if it is currently being displayed, from the currently set state." />
      <item value="Updates the thumb drawable bounds. Params: w – Width of the view, including padding thumb – Drawable used for the thumb scale – Current progress between 0 and 1 offset – Vertical offset for centering. If set to Integer.MIN_VALUE, the current offset will be used." />
      <item value="Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing. Params: layoutDirection – the direction of the layout" />
      <item value="set Visual Progress" />
      <item value="light child" />
      <item value="The view whose visibility changed. May be this or an ancestor view" />
      <item value="Called when the visibility of the view or an ancestor of the view has changed. Params: changedView – The view whose visibility changed. May be this or an ancestor view. visibility – The new visibility, one of VISIBLE, INVISIBLE or GONE." />
      <item value="Interface definition for a callback to be invoked when the status bar changes visibility. This reports global changes to the system UI state, not what the application is requesting. See Also: setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener)" />
      <item value="Set a listener to receive callbacks when the visibility of the system bar changes." />
      <item value="update Thumb And Track Pos" />
      <item value="Updates the thumb drawable bounds." />
      <item value="The max height does not incorporate padding, whereas the height" />
      <item value="direction – Negative to check scrolling left, positive to check scrolling right" />
      <item value="Check if this view can be scrolled horizontally in a certain direction." />
      <item value="Called when a child of RecyclerView does not want RecyclerView and its ancestors to intercept touch events with ViewGroup.onInterceptTouchEvent(MotionEvent). Params: disallowIntercept – True if the child does not want the parent to intercept touch events. See Also: ViewParent.requestDisallowInterceptTouchEvent(boolean)" />
      <item value="direction – Negative to check scrolling left, positive to check scrolling right." />
      <item value="true if this view can be scrolled in the specified direction, false otherwise." />
      <item value="Check if this view can be scrolled horizontally in a certain direction. Params: direction – Negative to check scrolling left, positive to check scrolling right. Returns: true if this view can be scrolled in the specified direction, false otherwise." />
      <item value="ass the touch screen motion event down to the target view, or this view if it is the target. Params: event – The motion event to be dispatched. Returns: True if the event was handled by the view, false otherwise." />
      <item value="Query if horizontal scrolling is currently supported. The default implementation returns false." />
      <item value="Inverse the sign of the vertical scroll to align the scroll orientation" />
      <item value="dispatch Touch Event" />
      <item value="A SeekBar which supports compatible features on older versions of the platform. This will automatically be used when you use SeekBar in your layouts and the top-level activity dialog is provided by appcompat. You should only need to manually use this class when writing custom views." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="3183" />
        <entry key="ENGLISH" value="3184" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="BASQUE" value="1" />
        <entry key="GERMAN" value="5" />
        <entry key="RUSSIAN" value="6" />
        <entry key="FRENCH" value="6" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="13" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="2" />
        <entry key="LATIN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="SPANISH" value="8" />
        <entry key="ITALIAN" value="6" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1663574194066" />
  </component>
</application>