<application>
  <component name="AppStorage">
    <histories>
      <item value="Returns a Flowable that emits buffers of items it collects from the source Publisher. The resulting * Publisher emits connected, non-overlapping buffers, each of a fixed duration specified by the * {@code timespan} argument. When the source Publisher completes, the resulting Publisher emits the current buffer * and propagates the notification from the source Publisher. Note that if the source Publisher issues an onError * notification the event is passed on immediately without first emitting the buffer it is in the process of * assembling." />
      <item value="Request a scan for access points. Returns immediately. The availability * of the results is made known later by means of an asynchronous event sent * on completion of the scan." />
      <item value="signal strength changed" />
      <item value="Broadcast intent action indicating that the configured networks changed." />
      <item value="An access point scan has completed, and results are available." />
      <item value="`true` if this property is `lateinit`." />
      <item value="This declaration can only be called on a reference to a lateinit property" />
      <item value="depending on the action, do necessary business logic calls and update the" />
      <item value="Returns a Single that emits a single HashMap containing all items emitted by the finite source Publisher, * mapped by the keys returned by a specified {@code keySelector} function." />
      <item value="URL resolved against the {@linkplain Retrofit#baseUrl() base URL}." />
      <item value="See {@linkplain retrofit2.Retrofit.Builder#baseUrl(HttpUrl) base URL} for details of how * the value will be resolved against a base URL to create the full endpoint URL." />
      <item value="expect {, actual pos 51" />
      <item value="Callback called when the data received do not conform to required scheme." />
      <item value="Returns `true` if at least one element matches the given [predicate]." />
      <item value="Returns `true` if no elements match the given [predicate]." />
      <item value="This function will commit all queued up characteristic write * operations for a given remote device." />
      <item value="Executes a reliable write transaction for a given remote device." />
      <item value="Callback invoked when a reliable write transaction has been completed." />
      <item value="Reliable" />
      <item value="offer" />
      <item value="All methods defined in the super class." />
      <item value="Sets an optional retry count and a delay that the process will wait before each connection * attempt. The library will NOT retry if the device is not reachable, that is when the 30 sec. * timeout occurs. In that case the app should scan before connecting, to make sure the * target is in range." />
      <item value="Different PHYs are available only on more recent devices with Android 8+. * Check {@link BluetoothAdapter#isLe2MPhySupported()} and * {@link BluetoothAdapter#isLeCodedPhySupported()} if required PHYs are supported by this * Android device. The default PHY is {@link PhyRequest#PHY_LE_1M_MASK}." />
      <item value="Sets the preferred PHY used for connection. Th value should be a bitmask composed of" />
      <item value="Prefer the S=8 coding to be used when transmitting on the LE Coded PHY." />
      <item value="Bluetooth LE 2M PHY mask. Used to specify LE 2M Physical Channel as one of many available * options in a bitmask." />
      <item value="Bluetooth LE 1M PHY mask. Used to specify LE 1M Physical Channel as one of many available * options in a bitmask." />
      <item value="This method will be called if a remote device requires a non-'just works' pairing. * See PAIRING_* constants for possible options." />
      <item value="the handler used for delaying operations, timeouts and, most of all, the * request callbacks (done/fail/with, etc)." />
      <item value="Note that only one observer is going to be notified of changes." />
      <item value="This avoids a common problem with events: on configuration change (like rotation) an update * can be emitted if the observer is active. This LiveData only calls the observable if there's an * explicit call to setValue() or call()." />
      <item value="A lifecycle-aware observable that sends only new updates after subscription, used for events like * navigation and Snackbar messages." />
      <item value="Invalid" />
      <item value="Called when the data has been sent to the connected device." />
      <item value="不在范围内" />
      <item value="刻度" />
      <item value="undefined" />
      <item value="AI code completions for Java &amp; Javascript on IntelliJ, Android Studio, WebStorm, and PhpStorm" />
      <item value="ompresses javascript files by removing unnecessary whitespace, comments etc javascript source file should be named yourfilename.source.js otherwise source file is created before compressing the original file press ctrl+shift+alt+j while file is opened in editor panel the compressed javascript file will be saved as yourfilename.js" />
      <item value="GraphQL language support including tagged template literals in JavaScript and TypeScript. Feature highlights: Schema-aware completion, error highlighting, and documentation Syntax highlighting, code-formatting, folding, commenter, and brace-matching Execute queries and mutations with variables against configurable endpoints Support for multiple schemas using graphql-config" />
      <item value="See all the JS Toolbox actions from two locations: From Tools &gt; JS Toolbox From the editor, right click &gt; JS Toolbox Go to test [Alt T], [Ctrl Command T] on Mac Jump between a javascript file and its unit test. You can configure the file name patterns under: Settings &gt; JS Toolbox And set values for Unit test suffix and File suffix If you need multiple patterns use comma. For example: Unit test suffix: &quot;Spec.js,-spec.js&quot; File suffix: &quot;-controller.js,.js&quot; With this configuration the action will take you from: &quot;my-component.js&quot; or &quot;my-component-controller.js&quot;" />
      <item value="JS Toolbox An Intellij / Webstorm plugin that provides several tools for javascript development. Here is a list of available actions: Go to test [Alt T], [Ctrl Command T] on Mac Go to view [Alt V], [Ctrl Command V] on Mac Go to constructor [Alt G], [Ctrl Command G] on a mac Join multi-line strings and variable declarations [Ctrl SHIFT Alt J], [Ctrl Command J] on Mac Open current file in browser [Ctrl SHIFT Alt G], [SHIFT Option Command G] on Mac Add a semi-color at the end of the line [Ctrl SHIFT ;], [Command SHIFT ;] on Mac Sort the selection using a user-defined splitter [SHIFT alt 1], [Command SHIFT 1] on Mac Generate a method for the current javascript class Override a method from the parent javascript class" />
      <item value="Monokai Pro &amp; MacOS Mojave inspired color themes, with bright colors &amp; dark mode, with common color code for all languages. See description &amp; screenshots on Github. Check the sources, iTerm2 and macOS Terminal and XCode color schemes also available" />
      <item value="this sometimes occurs after a network connection timeout." />
      <item value="FRAGMENTATION" />
      <item value="the range interval of RangeSeekBar" />
      <item value="a Single to be concatenated after the current" />
      <item value="Returns a Flowable that emits the item emitted by the source Single, then the item emitted by the * specified Single." />
      <item value="Vibration" />
      <item value="Illumination" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="435" />
        <entry key="ENGLISH" value="436" />
        <entry key="KOREAN" value="92" />
        <entry key="KURDISH" value="1" />
        <entry key="JAPANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>