<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="Not enough memory to allocate buffers for rehashing: 2097152 -&gt; 4194304" />
      <item value="Note: Two {@code null} items are assumed to represent the same contents. This callback will not be invoked for this case." />
      <item value="True if the contents of the items are the same or false if they are different." />
      <item value="Called to check whether two items have the same data." />
      <item value="This information is used to detect if the contents of an item have changed." />
      <item value="This method to check equality instead of {@link Objectequals(Object)} so that you can change its behavior depending on your UI." />
      <item value="For example, if you are using DiffUtil with a {@link RecyclerView.Adapter RecyclerView.Adapter}, you should return whether the items' visual representations are the same." />
      <item value="This method is called only if {@link areItemsTheSame(T, T)} returns {@code true} for these items." />
      <item value="For example, if you are using DiffUtil with {@link RecyclerView}, you can return the particular field that changed in the item and your {@link RecyclerView.ItemAnimator ItemAnimator} can use that information to run the correct animation." />
      <item value="When {@link areItemsTheSame(T, T)} returns {@code true} for two items and {@link areContentsTheSame(T, T)} returns false for them, this method is called to get a payload about the change." />
      <item value="This class holds the information about the result of a calculateDiff(DiffUtil.Callback, boolean) call." />
      <item value="This class holds the information about the result of a calculateDiff(DiffUtil.Callback, boolean) call. You can consume the updates in a DiffResult via dispatchUpdatesTo(ListUpdateCallback) or directly stream the results into a RecyclerView.Adapter via dispatchUpdatesTo(RecyclerView.Adapter)." />
      <item value="commit Callback" />
      <item value="warning: redirecting to" />
      <item value="sign In With Code Result" />
      <item value="全屋" />
      <item value="Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function. The sort is stable. It means that equal elements preserve their order relative to each other after sorting. Samples: samples.collections.Collections.Sorting.sortedBy Unresolved" />
      <item value="Inserts an element into the list at the specified index." />
      <item value="Environment.get External Storage Directory().can Write()" />
      <item value="Storage state if the media is present and mounted at its mount point with readwrite access. See Also: getExternalStorageState(File)" />
      <item value="File Not Found Exception" />
      <item value="Blocking inter process call that enables the DisplayLeakActivity. When you first install the app, DisplayLeakActivity is disabled by default and will only be enabled once a potential leak has been found and the analysis starts. You can call this method to enable DisplayLeakActivity before any potential leak has been detected." />
      <item value="Creates a RefWatcher that works out of the box, and starts watching activity references (on ICS+)" />
      <item value="Whether to stop monitoring when in debug mode. Returns: true if stop, false otherwise" />
      <item value="Block interceptor, developer may provide their own actions." />
      <item value="Whether to delete files whose stack is in white list, used with white-list. Returns: true if delete, false it not." />
      <item value="Filter stack without any in concern package, used with @{code concernPackages}. Returns: true if filter, false it not." />
      <item value="Packages that developer concern, by default it uses process name, put high priority one in pre-order. Returns: null if simply concern only package with process name." />
      <item value="Implement in your project, bundled log files. Params: zippedFile – zipped file" />
      <item value="Implement in your project, bundle files into a zip file. Params: src – files before compress dest – files compressed Returns: true if compression is successful" />
      <item value="Thread stack dump interval, use when block happens, BlockCanary will dump on main thread stack according to current sample cycle. Because the implementation mechanism of Looper, real dump interval would be longer than the period specified here (especially when cpu is busier). Returns: dump interval (in millis)" />
      <item value="Config monitor duration, after this time BlockCanary will stop, use with BlockCanary's isMonitorDurationEnd Returns: monitor last duration (in hour)" />
      <item value="Config block threshold (in millis), dispatch over this duration is regarded as a BLOCK. You may set it from performance of device. Returns: threshold in mills" />
      <item value="Network type Returns: String like 2G, 3G, 4G, wifi, etc." />
      <item value="Implement in your project. Returns: user id" />
      <item value="Implement in your project. Returns: Qualifier which can specify this installation, like version + flavor." />
      <item value="1 exception was raised by workers" />
      <item value="provide Block Threshold" />
      <item value="provide Monitor Duration" />
      <item value="provide Qualifier" />
      <item value="Creates a centered bitmap of the desired size. Params: source – original bitmap source width – targeted width height – targeted height options – options used during thumbnail extraction" />
      <item value="Set the number of pages that should be retained to either side of the currently visible page(s). Pages beyond this limit will be recreated from the adapter when needed. Set this to OFFSCREEN_PAGE_LIMIT_DEFAULT to use RecyclerView's caching strategy. The given value must either be larger than 0, or OFFSCREEN_PAGE_LIMIT_DEFAULT. Pages within limit pages away from the current page are created and added to the view hierarchy, even though they are not visible on the screen. Pages outside this limit will be removed from the view hierarchy, but the ViewHolders will be recycled as usual by RecyclerView. This is offered as an optimization. If you know in advance the number of pages you will need to support or have lazy-loading mechanisms in place on your pages, tweaking this setting can have benefits in perceived smoothness of paging animations and interaction. If you have a small number of pages (3-4) that you can keep active all at once, less time will be spent in layout for newly created view subtrees as the user pages back and forth. You should keep this limit low, especially if your pages have complex layouts. By default it is set to OFFSCREEN_PAGE_LIMIT_DEFAULT. Params: limit – How many pages will be kept offscreen on either side. Valid values are all values &gt;= 1 and OFFSCREEN_PAGE_LIMIT_DEFAULT Throws:" />
      <item value="point In View" />
      <item value="Inconsistency detected. Invalid view holder adapter" />
      <item value="end Inclusive" />
      <item value="Gets the current value of the default locale for this instance of the Java Virtual Machine. The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the setDefault method. Returns: the default locale for this instance of the Java Virtual Machine" />
      <item value="Define the tileable drawable used to draw the progress bar in progress mode. If the drawable is a BitmapDrawable or contains BitmapDrawables, a tiled copy will be generated for display as a progress bar." />
      <item value="Returns the drawable currently used to draw the progress bar. This will be either getProgressDrawable() or getIndeterminateDrawable() depending on whether the progress bar is in determinate or indeterminate mode. Returns: the drawable currently used to draw the progress bar" />
      <item value="Outside the framework, instead of accessing this directly, please use getCurrentDrawable(), setProgressDrawable(Drawable), setIndeterminateDrawable(Drawable) and their tiled versions." />
      <item value="pecifies the hotspot's location within the drawable. Params: x – The X coordinate of the center of the hotspot y – The Y coordinate of the center of the hotspot" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2428" />
        <entry key="ENGLISH" value="2429" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="BASQUE" value="1" />
        <entry key="RUSSIAN" value="4" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="11" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1656578205222" />
  </component>
</application>