<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="The provider that owns this Lifecycle. Only WeakReference on LifecycleOwner is kept, so if somebody leaks Lifecycle, they won't leak the whole Fragment Activity. However, to leak Lifecycle object isn't great idea neither, because it keeps strong references on all other listeners, so you'll leak all of them as well." />
      <item value="m New Event Occurred" />
      <item value="backward Pass" />
      <item value="newest" />
      <item value="ceil" />
      <item value="delta" />
      <item value="remaining Space" />
      <item value="More optimized set the click listener inside the view holder" />
      <item value="TODO: Consider the case mFlexWrap is set to nowrap and view is recycled individually" />
      <item value="Echelon" />
      <item value="Skid Right" />
      <item value="Stack" />
      <item value="Contains the calculateExtraLayoutSpace(RecyclerView.State, int[]) extra layout space} that should be excluded for recycling when cleaning up the tail of the list during a smooth scroll." />
      <item value="m No Recycle Space" />
      <item value="get Transformed Start With Decoration" />
      <item value="Recycles views that went out of bounds after scrolling towards the start of the layout. Checks both layout position and visible position to guarantee that the view is not visible." />
      <item value="ecycles views that went out of bounds after scrolling towards the start of the layout. Checks both layout position and visible position to guarantee that the view is not visible." />
      <item value="Current layout state. Right now, this object does not change but we may consider moving it out of this view so passing around as a parameter for now, rather than accessing mLayoutState" />
      <item value="Helper method to call appropriate recycle method depending on current layout direction Params: recycler – Current recycler that is attached to RecyclerView layoutState – Current layout state. Right now, this object does not change but we may consider moving it out of this view so passing around as a parameter for now, rather than accessing mLayoutState" />
      <item value="amount" />
      <item value="Decorated" />
      <item value="Helper class for LayoutManagers to abstract measurements depending on the View's orientation. It is developed to easily support vertical and horizontal orientations in a LayoutManager but can also be used to abstract calls around view bounds and child measurements with margins and decorations. See Also: createHorizontalHelper(RecyclerView.LayoutManager), createVerticalHelper(RecyclerView.LayoutManager)" />
      <item value="Payload info. if return null, the entire item will be refreshed." />
      <item value="When areItemsTheSame(T, T) returns true for two items and areContentsTheSame(T, T) returns false for them, this method is called to get a payload about the change. For example, if you are using DiffUtil with RecyclerView, you can return the particular field that changed in the item and your ItemAnimator can use that information to run the correct animation." />
      <item value="Called by the DiffUtil when it wants to check whether two items have the same data. DiffUtil uses this information to detect if the contents of an item has changed. DiffUtil uses this method to check equality instead of Object.equals(Object) so that you can change its behavior depending on your UI. For example, if you are using DiffUtil with a RecyclerView.Adapter, you should return whether the items' visual representations are the same." />
      <item value="True if the contents of the items are the same or false if they are different." />
      <item value="oldItem – The item in the old list. newItem – The item in the new list." />
      <item value="Called to check whether two items have the same data. This information is used to detect if the contents of an item have changed. This method to check equality instead of Object.equals(Object) so that you can change its behavior depending on your UI. For example, if you are using DiffUtil with a RecyclerView.Adapter, you should return whether the items' visual representations are the same. This method is called only if areItemsTheSame(T, T) returns true for these items. Note: Two null items are assumed to represent the same contents. This callback will not be invoked for this case." />
      <item value="Temporarily detach and scrap all currently attached child views. Views will be scrapped into the given Recycler. The Recycler may prefer to reuse scrap views before other views that were previously recycled. Params: recycler – Recycler to scrap views into" />
      <item value="detach And Scrap Attached Views(recycler);" />
      <item value="Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch any more events. For instance, for an android.app.Activity, this state is reached right before Activity's onDestroy call." />
      <item value="Modifies the source Publisher so that it invokes the given action when it is subscribed from its subscribers. Each subscription will result in an invocation of the given action except when the source Publisher is reference counted, in which case the source Publisher will invoke the given action for the first subscription." />
      <item value="Modifies the source Publisher so that it invokes the given action when it receives a request for more items. Note: This operator is for tracing the internal behavior of back-pressure request patterns and generally intended for debugging use." />
      <item value="No Op" />
      <item value="Attempts to get the ViewHolder for the given position, either from the Recycler scrap, cache, the RecycledViewPool, or creating it directly." />
      <item value="position – Position of ViewHolder to be returned. dryRun – True if the ViewHolder should not be removed from scrapcache deadlineNs – Time, relative to getNanoTime(), by which bindcreate work should complete. If FOREVER_NS is passed, this method will not fail to createbind the holder if needed." />
      <item value="deadline Ns" />
      <item value="Not enough memory to allocate buffers for rehashing: 2097152 -&gt; 4194304" />
      <item value="Note: Two {@code null} items are assumed to represent the same contents. This callback will not be invoked for this case." />
      <item value="Called to check whether two items have the same data." />
      <item value="This information is used to detect if the contents of an item have changed." />
      <item value="This method to check equality instead of {@link Objectequals(Object)} so that you can change its behavior depending on your UI." />
      <item value="For example, if you are using DiffUtil with a {@link RecyclerView.Adapter RecyclerView.Adapter}, you should return whether the items' visual representations are the same." />
      <item value="This method is called only if {@link areItemsTheSame(T, T)} returns {@code true} for these items." />
      <item value="For example, if you are using DiffUtil with {@link RecyclerView}, you can return the particular field that changed in the item and your {@link RecyclerView.ItemAnimator ItemAnimator} can use that information to run the correct animation." />
      <item value="When {@link areItemsTheSame(T, T)} returns {@code true} for two items and {@link areContentsTheSame(T, T)} returns false for them, this method is called to get a payload about the change." />
      <item value="This class holds the information about the result of a calculateDiff(DiffUtil.Callback, boolean) call." />
      <item value="This class holds the information about the result of a calculateDiff(DiffUtil.Callback, boolean) call. You can consume the updates in a DiffResult via dispatchUpdatesTo(ListUpdateCallback) or directly stream the results into a RecyclerView.Adapter via dispatchUpdatesTo(RecyclerView.Adapter)." />
      <item value="commit Callback" />
      <item value="warning: redirecting to" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2466" />
        <entry key="ENGLISH" value="2467" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="BASQUE" value="1" />
        <entry key="RUSSIAN" value="4" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="11" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1657530776017" />
  </component>
</application>