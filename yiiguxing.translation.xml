<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="373" />
    <option name="newTranslationDialogX" value="572" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="Updates the thumb drawable bounds. Params: w – Width of the view, including padding thumb – Drawable used for the thumb scale – Current progress between 0 and 1 offset – Vertical offset for centering. If set to Integer.MIN_VALUE, the current offset will be used." />
      <item value="Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing. Params: layoutDirection – the direction of the layout" />
      <item value="set Visual Progress" />
      <item value="light child" />
      <item value="The view whose visibility changed. May be this or an ancestor view" />
      <item value="Called when the visibility of the view or an ancestor of the view has changed. Params: changedView – The view whose visibility changed. May be this or an ancestor view. visibility – The new visibility, one of VISIBLE, INVISIBLE or GONE." />
      <item value="Interface definition for a callback to be invoked when the status bar changes visibility. This reports global changes to the system UI state, not what the application is requesting. See Also: setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener)" />
      <item value="Set a listener to receive callbacks when the visibility of the system bar changes." />
      <item value="update Thumb And Track Pos" />
      <item value="Updates the thumb drawable bounds." />
      <item value="The max height does not incorporate padding, whereas the height" />
      <item value="direction – Negative to check scrolling left, positive to check scrolling right" />
      <item value="Check if this view can be scrolled horizontally in a certain direction." />
      <item value="Called when a child of RecyclerView does not want RecyclerView and its ancestors to intercept touch events with ViewGroup.onInterceptTouchEvent(MotionEvent). Params: disallowIntercept – True if the child does not want the parent to intercept touch events. See Also: ViewParent.requestDisallowInterceptTouchEvent(boolean)" />
      <item value="direction – Negative to check scrolling left, positive to check scrolling right." />
      <item value="true if this view can be scrolled in the specified direction, false otherwise." />
      <item value="Check if this view can be scrolled horizontally in a certain direction. Params: direction – Negative to check scrolling left, positive to check scrolling right. Returns: true if this view can be scrolled in the specified direction, false otherwise." />
      <item value="ass the touch screen motion event down to the target view, or this view if it is the target. Params: event – The motion event to be dispatched. Returns: True if the event was handled by the view, false otherwise." />
      <item value="Query if horizontal scrolling is currently supported. The default implementation returns false." />
      <item value="Inverse the sign of the vertical scroll to align the scroll orientation" />
      <item value="dispatch Touch Event" />
      <item value="A SeekBar which supports compatible features on older versions of the platform. This will automatically be used when you use SeekBar in your layouts and the top-level activity dialog is provided by appcompat. You should only need to manually use this class when writing custom views." />
      <item value="A callback that notifies clients when the progress level has been changed. This includes changes that were initiated by the user through a touch gesture or arrow keytrackball as well as changes that were initiated programmatically." />
      <item value="Notification that the progress level has changed. Clients can use the fromUser parameter to distinguish user-initiated changes from those that occurred programmatically. Params: seekBar – The SeekBar whose progress has changed progress – The current progress level. This will be in the range min..max where min and max were set by ProgressBar.setMin(int) and ProgressBar.setMax(int), respectively. (The default values for min is 0 and max is 100.) fromUser – True if the progress change was initiated by the user." />
      <item value="Notification that the user has finished a touch gesture. Clients may want to use this to re-enable advancing the seekbar. Params: seekBar – The SeekBar in which the touch gesture began" />
      <item value="你是我家的王" />
      <item value="你是我家的wnag" />
      <item value="你是我家z'h" />
      <item value="Could not locate call adapter" />
      <item value="Primary constructor call expected" />
      <item value="Secondary constructor should be converted to a primary one" />
      <item value="Instructs the Kotlin compiler to generate overloads for this function that substitute default parameter values. If a method has N parameters and M of which have default values, M overloads are generated: the first one takes N-1 parameters (all but the last one that takes a default value), the second takes N-2 parameters, and so on." />
      <item value="Calling non-final function getResLayoutId in constructor" />
      <item value="needPossible" />
      <item value="synthetic method" />
      <item value="perm" />
      <item value="推荐" />
      <item value="category" />
      <item value="Transient" />
      <item value="Pattern Run" />
      <item value="PatternRun" />
      <item value="特殊字符（中文字符 仅需要 逗号、括号、顿号，英文字符：括号，双引号，逗号，句号（点），下划线、斜杠，短横杠，空格）" />
      <item value="、特殊字符（中文字符 仅需要 逗号、括号、顿号，英文字符：括号，双引号，逗号，句号（点），下划线、斜杠，短横杠，空格）" />
      <item value="Special characters (Chinese characters only require commas, brackets, commas, English characters: brackets, double quotation marks, commas, periods (dots), underscores, slashes, dashes, spaces)" />
      <item value="这句话是用来验证正则,看看没有特殊符号" />
      <item value="这句话是用来验证正则,看看没有" />
      <item value="这句话是用来验证正则" />
      <item value="这句话是用来验证正则ssssdgsgdfhgsd" />
      <item value="这句话是用来验证曾真" />
      <item value="zhe'ju" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="3147" />
        <entry key="ENGLISH" value="3148" />
        <entry key="CHINESE_TRADITIONAL" value="6" />
        <entry key="BASQUE" value="1" />
        <entry key="GERMAN" value="5" />
        <entry key="RUSSIAN" value="6" />
        <entry key="FRENCH" value="6" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="KOREAN" value="13" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="2" />
        <entry key="LATIN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="SPANISH" value="8" />
        <entry key="ITALIAN" value="6" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1663574194066" />
  </component>
</application>