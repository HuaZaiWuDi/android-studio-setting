<application>
  <component name="AppStorage">
    <histories>
      <item value="Some privileges permanently disabled, may need to set up in the execute." />
      <item value="Handle overlay permission." />
      <item value="不支持" />
      <item value="Do your init work in this method, it well be call when processor has been load." />
      <item value="ethernet" />
      <item value="pool" />
      <item value="This shouldn't ever happen, see #331." />
      <item value="dump" />
      <item value="A strategy for reusing bitmaps that requires any returned bitmap's dimensions to exactly match * those request." />
      <item value="Cloud" />
      <item value="Returns the value mapped by {@code name} if it exists and is a {@code * JSONObject}, or null otherwise." />
      <item value="at result of type java.lang.String cannot be converted to JSONObject" />
      <item value="Sets a Disposable on this emitter; any previous Disposable * or Cancellable will be disposed/cancelled." />
      <item value="A functional interface that has a single cancel method * that can throw." />
      <item value="Sets a Cancellable on this emitter; any previous {@link Disposable} * or {@link Cancellable} will be disposed/cancelled." />
      <item value="the emitter that is called when a SingleObserver subscribes to the returned {@code Single}" />
      <item value="Provides an API (via a cold Completable) that bridges the reactive world with the callback-style world." />
      <item value="Read error: ssl=0xc8d77828: I/O error during system call, Software caused connection abort" />
      <item value="refresh Wifi List" />
      <item value="Movement" />
      <item value="不允许绑定" />
      <item value="重新绑定" />
      <item value="已绑定" />
      <item value="binded" />
      <item value="unregister" />
      <item value="cloud" />
      <item value="cloudcloud" />
      <item value="生成" />
      <item value="UNSUPPORT" />
      <item value="transport" />
      <item value="传输" />
      <item value="PARAMETER" />
      <item value="参数" />
      <item value="PARAM" />
      <item value="本地" />
      <item value="LOCATION" />
      <item value="BLE" />
      <item value="REASON BLUETOOTH DISABLED" />
      <item value="the delay between each connection attempt, in milliseconds. The real delay will be 200 ms longer than specified, as {@link BluetoothGatt#clone()} is estimated to last {@link BleManagerHandler#internalConnect(BluetoothDevice, ConnectRequest) 200 ms}." />
      <item value="Sets an optional retry count and a delay that the process will wait before each connection attempt. The library will NOT retry if the device is not reachable, that is when the 30 sec. timeout occurs. In that case the app should scan before connecting, to make sure the target is in range." />
      <item value="Use to set a completion callback. The callback will be invoked when the operation has finished successfully unless {@link #await()} or its variant was used, in which case this callback will be ignored. &lt;p&gt; The done callback will also be called when one or more of initialization requests has failed due to a reason other than disconnect event. This is because {@link BleManagerCallbacks#onDeviceReady(BluetoothDevice)} is called no matter if the requests succeeded, or not. Set failure callbacks to initialization requests to get information about failures." />
      <item value="The {@link #done(SuccessCallback)} callback will be called after the device is ready, that is when it is connected, the services were discovered, the required services were found and the initialization queue set in {@link BleManager.BleManagerGattCallback#initialize()} is complete (without or with errors)." />
      <item value="The {@link #done(SuccessCallback)} callback will be called after the device is ready, that is * when it is connected, the services were discovered, the required services were found and the * initialization queue set in {@link BleManager.BleManagerGattCallback#initialize()} is complete * (without or with errors)." />
      <item value="The connect request is used to connect to a Bluetooth LE device. The request will end when * the device gets connected, the connection timeouts, or an error occurs." />
      <item value="invalid" />
      <item value="REASON DEVICE DISCONNECTED" />
      <item value="REASON DEVICE NOT SUPPORTED" />
      <item value="REASON NULL ATTRIBUTE" />
      <item value="REASON REQUEST FAILED" />
      <item value="REASON TIMEOUT" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1515" />
        <entry key="ENGLISH" value="1516" />
        <entry key="FRENCH" value="1" />
        <entry key="KOREAN" value="92" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="JAPANESE" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>