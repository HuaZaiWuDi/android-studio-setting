<application>
  <component name="AppStorage">
    <histories>
      <item value="Kettle" />
      <item value="No Such Method Error" />
      <item value="artifact" />
      <item value="artifact Id" />
      <item value="inner" />
      <item value="{@link Handler} to specify the thread upon which the callback will be invoked." />
      <item value="The {@link NetworkCallback} to be utilized for this request. Note * the callback must not be shared - it uniquely specifies this request. * The callback is invoked on the default internal Handler." />
      <item value="Determines if the specified {@code Object} is assignment-compatible * with the object represented by this {@code Class}. This method is * the dynamic equivalent of the Java language {@code instanceof} * operator. The method returns {@code true} if the specified * {@code Object} argument is non-null and can be cast to the * reference type represented by this {@code Class} object without * raising a {@code ClassCastException.} It returns {@code false} * otherwise." />
      <item value="Determines if the specified {@code Class} object represents an * interface type." />
      <item value="is Assignable From" />
      <item value="true if {@code obj} is an instance of this class" />
      <item value="条件" />
      <item value="Callback on interrupt." />
      <item value="Callback after navigation." />
      <item value="BE ATTENTION TO THIS METHOD WAS &lt;P&gt;SET, NOT ADD!&lt;/P&gt;" />
      <item value="不同意" />
      <item value="analyze" />
      <item value="You can use this to prevent errors from propagating or to supply fallback data should errors be * encountered." />
      <item value="Calls the shared consumer with the error sent via onError for each * SingleObserver that subscribes to the current Single." />
      <item value="** * Instructs a Single to pass control to another Single rather than invoking * {@link SingleObserver#onError(Throwable)} if it encounters an error." />
      <item value="denied" />
      <item value="不支持" />
      <item value="Returns the detail message string of this throwable." />
      <item value="Localized" />
      <item value="Creates a localized description of this throwable. * Subclasses may override this method in order to produce a * locale-specific message. For subclasses that do not override this * method, the default implementation returns the same result as * {@code getMessage()}." />
      <item value="Represents an exception that is a composite of one or more other exceptions. A {@code CompositeException} * does not modify the structure of any exception it wraps, but at print-time it iterates through the list of * Throwables contained in the composite in order to print them all." />
      <item value="Re-subscribe to the current Single if the given predicate returns true when the Single fails * with an onError." />
      <item value="Instructs a Single to pass control to another Single rather than invoking * {@link SingleObserver#onError(Throwable)} if it encounters an error." />
      <item value="Instructs a Single to pass control to another Single rather than invoking" />
      <item value="带瓶设备" />
      <item value="面板" />
      <item value="Link" />
      <item value="拦截器" />
      <item value="Volatile" />
      <item value="Marks the JVM backing field of the annotated property as `volatile`, meaning that writes to this field * are immediately made visible to other threads." />
      <item value="Marks the JVM method generated from the annotated function as `strictfp`, meaning that the precision * of floating point operations performed inside the method needs to be restricted in order to * achieve better portability." />
      <item value="Marks the JVM backing field of the annotated property as `transient`, meaning that it is not * part of the default serialized form of the object." />
      <item value="Marks the JVM method generated from the annotated function as `synchronized`, meaning that the method * will be protected from concurrent execution by multiple threads by the monitor of the instance (or, * for static methods, the class) on which the method is defined." />
      <item value="provisioned" />
      <item value="Retains only elements of this [MutableCollection] that are contained in the given [elements] collection." />
      <item value="subtract" />
      <item value="Returns a set containing all elements that are contained by both this collection and the specified collection." />
      <item value="intersect" />
      <item value="Reduce" />
      <item value="Returns a list containing successive accumulation values generated by applying [operation] from left to right * to each element and current accumulator value that starts with [initial] value." />
      <item value="scan" />
      <item value="reduce" />
      <item value="fold Indexed" />
      <item value="union" />
      <item value="period" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1409" />
        <entry key="ENGLISH" value="1410" />
        <entry key="FRENCH" value="1" />
        <entry key="KOREAN" value="92" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>