<application>
  <component name="AppStorage">
    <histories>
      <item value="encode" />
      <item value="depends" />
      <item value="reduce" />
      <item value="The name of a supported {@linkplain java.nio.charset.Charset * charset}" />
      <item value="Converts the data from the specified array of bytes to characters using the specified character set * and returns the conversion result as a string." />
      <item value="Encodes the contents of this string using the specified character set and returns the resulting byte array." />
      <item value="syntax error" />
      <item value="Optional parameter, use null to identify a &quot;full&quot; update" />
      <item value="Channel" />
      <item value="multi select" />
      <item value="Returns a new map with entries having the keys of this map and the values obtained by applying the [transform] * function to each entry in this [Map]." />
      <item value="Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function." />
      <item value="Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function." />
      <item value="decryption failed" />
      <item value="This annotation is not applicable to target 'member property without backing field or delegate'" />
      <item value="is defined multiple times:" />
      <item value="Location is illegal" />
      <item value="The color for the navigation bar. If the color is not opaque, consider setting {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}. For this to take effect, the window must be drawing the system bar backgrounds with {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not have been requested to be translucent with {@link android.R.attr#windowTranslucentNavigation}. Corresponds to {@link android.view.Window#setNavigationBarColor(int)}." />
      <item value="Flag indicating whether this window requests a translucent navigation bar. Corresponds to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}." />
      <item value="Flag indicating whether this window requests a translucent navigation bar." />
      <item value="For this to take effect, the window must be drawing the system bar backgrounds with {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not have been requested to be translucent with {@link android.R.attr#windowTranslucentNavigation}." />
      <item value="For this to take effect, the window must be drawing the system bar backgrounds with {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not have been requested to be translucent with" />
      <item value="The color for the navigation bar. If the color is not opaque, consider setting" />
      <item value="Shows a thin line of the specified color between the navigation bar and the app content." />
      <item value="resolve" />
      <item value="Indicates that the operation failed because the maximum outstanding * requests from the applications have reached." />
      <item value="Indicates that the operation failed due to an internal error." />
      <item value="Indicates that the operation failed because it is already active." />
      <item value="a {@link ConnectableObservable} that upon connection causes the source ObservableSource to emit its * items to its {@link Observer}s" />
      <item value="Returns a {@link ConnectableObservable} that shares a single subscription to the underlying ObservableSource * that will replay all of its items and notifications to any future {@link Observer}. A Connectable * ObservableSource resembles an ordinary ObservableSource, except that it does not begin emitting items when it is * subscribed to, but only when its {@code connect} method is called." />
      <item value="Returns a reversed read-only view of the original List. * All changes made in the original list will be reflected in the reversed one." />
      <item value="Returns a list with elements in reversed order." />
      <item value="Copies all of the elements from one list into another. After the * operation, the index of each copied element in the destination list * will be identical to its index in the source list. The destination * list must be at least as long as the source list. If it is longer, the * remaining elements in the destination list are unaffected. &lt;p&gt;" />
      <item value="Constructs a list containing the elements of the specified * collection, in the order they are returned by the collection's * iterator." />
      <item value="aggregate" />
      <item value="Perform the transaction action after onSaveInstanceState." />
      <item value="This is dangerous because the action can * be lost if the activity needs to later be restored from its state." />
      <item value="Delayed action must not be selected as the last action." />
      <item value="Delays cannot be continuous" />
      <item value="Favorite" />
      <item value="shortcut" />
      <item value="Delivery" />
      <item value="This position is deleted or do not have permission for this operation" />
      <item value="Supertypes of the following classes cannot be resolved. Please make sure you have the required dependencies in the classpath:" />
      <item value="Curtain" />
      <item value="Returns {@code true} if the FragmentManager's state has already been saved * by its host. Any operations that would change saved state should not be performed * if this method returns true. For example, any popBackStack() method, such as * {@link #popBackStackImmediate()} or any FragmentTransaction using * {@link FragmentTransaction#commit()} instead of * {@link FragmentTransaction#commitAllowingStateLoss()} will change * the state and will result in an error." />
      <item value="Perform" />
      <item value="If you don't want to lost the action:" />
      <item value="Perform the transaction action after onSaveInstanceState. * &lt;p&gt; * This is dangerous because the action can * be lost if the activity needs to later be restored from its state. * &lt;p&gt; * &lt;p&gt;" />
      <item value="Warning: Perform this popTo() action after onSaveInstanceState!" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="303" />
        <entry key="ENGLISH" value="304" />
        <entry key="KOREAN" value="92" />
        <entry key="JAPANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>